<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/05/05/5-5/vue/"/>
      <url>/2022/05/05/5-5/vue/</url>
      
        <content type="html"><![CDATA[<h1 id="搭好前端脚手架"><a href="#搭好前端脚手架" class="headerlink" title="搭好前端脚手架"></a>搭好前端脚手架</h1><h1 id="配置全局样式"><a href="#配置全局样式" class="headerlink" title="配置全局样式"></a>配置全局样式</h1><p>css文件下</p><pre><code class="css">/* 全局样式表 */html,body，#app&#123;    height: 100%;    margin: 0;    padding: 0;&#125;</code></pre><p>main.js下</p><pre><code class="js">import &#39;@/assets/css/global.css&#39;</code></pre><h1 id="1、登录页面"><a href="#1、登录页面" class="headerlink" title="1、登录页面"></a>1、登录页面</h1><p>使用less</p><p><strong>安装</strong></p><pre><code>npm install --save-dev less-loader less</code></pre><pre><code class="js">&lt;style lang=&quot;less&quot;&gt;&lt;/style&gt;</code></pre><p>vue3使用图标需要全局注册组件</p><pre><code class="bash">npm install @element-plus/icons-vue</code></pre><p>main.js中</p><pre><code class="js">import * as ElementPlusIconsVue from &#39;@element-plus/icons-vue&#39;for (const [key, component] of Object.entries(ElementPlusIconsVue)) &#123;  app.component(key, component)&#125;</code></pre><p>使用icon的方法</p><pre><code class="js">import &#123; Avatar, Lock &#125; from &quot;@element-plus/icons-vue&quot;;</code></pre><pre><code class="js">setup()&#123;  return &#123;     Avatar,     Lock   &#125;  &#125;</code></pre><p>输入框中引用</p><pre><code class="js">账号 prefix-icon=&quot;Avatar&quot;密码 prefix-icon=&quot;Lock&quot;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>json</title>
      <link href="/2022/05/05/5-5/json/"/>
      <url>/2022/05/05/5-5/json/</url>
      
        <content type="html"><![CDATA[<h1 id="Jackson"><a href="#Jackson" class="headerlink" title="Jackson"></a>Jackson</h1><p>导入依赖</p><pre><code class="xml">&lt;dependency&gt;  &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;  &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;  &lt;version&gt;2.13.2.2&lt;/version&gt;  &lt;type&gt;bundle&lt;/type&gt;&lt;/dependency&gt;</code></pre><h1 id="Fastjson"><a href="#Fastjson" class="headerlink" title="Fastjson"></a>Fastjson</h1><pre><code class="xml">&lt;dependency&gt;  &lt;groupId&gt;com.alibaba&lt;/groupId&gt;  &lt;artifactId&gt;fastjson&lt;/artifactId&gt;  &lt;version&gt;2.0.2.graal&lt;/version&gt;&lt;/dependency&gt;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/05/5-5/vue%E5%AE%9E%E7%8E%B0%E7%B2%92%E5%AD%90%E6%95%88%E6%9E%9C/"/>
      <url>/2022/05/05/5-5/vue%E5%AE%9E%E7%8E%B0%E7%B2%92%E5%AD%90%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-particles"><a href="#Vue-particles" class="headerlink" title="Vue-particles"></a>Vue-particles</h1><pre><code class="bash">npm install vue-particles --save-dev</code></pre><p>mai.js中</p><pre><code class="js">import Vue from &#39;vue&#39;import VueParticles from &#39;vue-particles&#39;Vue.use(VueParticles)</code></pre><p>组件中</p><pre><code class="vue">&lt;template&gt;    &lt;div &gt;      &lt;vue-particles        class=&quot;login-background&quot;        color=&quot;#97D0F2&quot;        :particleOpacity=&quot;0.7&quot;        :particlesNumber=&quot;80&quot;        shapeType=&quot;circle&quot;        :particleSize=&quot;4&quot;        linesColor=&quot;#dedede&quot;        :linesWidth=&quot;1&quot;        :lineLinked=&quot;true&quot;        :lineOpacity=&quot;0.4&quot;        :linesDistance=&quot;150&quot;        :moveSpeed=&quot;3&quot;        :hoverEffect=&quot;true&quot;        hoverMode=&quot;grab&quot;        :clickEffect=&quot;true&quot;        clickMode=&quot;push&quot;      &gt;      &lt;/vue-particles&gt;    &lt;/div&gt; &lt;/template&gt;&lt;style scoped&gt;.login-background &#123;        position: relative;    &#125;&lt;/style&gt;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Element-plus</title>
      <link href="/2022/05/01/5-1/Element-plus/"/>
      <url>/2022/05/01/5-1/Element-plus/</url>
      
        <content type="html"><![CDATA[<h1 id="Element-plus"><a href="#Element-plus" class="headerlink" title="Element-plus"></a>Element-plus</h1><p>安装：</p><pre><code class="bash">npm install element-plus --save</code></pre><p>main.js需导入两个文件</p><pre><code class="js">import &#123; createApp &#125; from &#39;vue&#39;import ElementPlus from &#39;element-plus&#39;import &#39;element-plus/dist/index.css&#39;import App from &#39;./App.vue&#39;const app = createApp(App)app.use(ElementPlus)app.mount(&#39;#app&#39;)</code></pre><p><strong>例子：</strong></p><p>使用选项式的API</p><p><strong>DatePicker 日期选择器</strong></p><p>APP.vue中：</p><pre><code class="vue">&lt;template&gt;  &lt;div&gt;    &lt;el-date-picker      v-model=&quot;value1&quot;      type=&quot;date&quot;      placeholder=&quot;Pick a day&quot;      :disabled-date=&quot;disabledDate&quot;      :shortcuts=&quot;shortcuts&quot;    /&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  name: &quot;App&quot;,  data() &#123;    return &#123;      value1: &quot;&quot;,      shortcuts: [        &#123;          text: &quot;Today&quot;,          value: new Date(),        &#125;,        &#123;          text: &quot;Yesterday&quot;,          value: () =&gt; &#123;            const date = new Date();            date.setTime(date.getTime() - 3600 * 1000 * 24);            return date;          &#125;,        &#125;,        &#123;          text: &quot;A week ago&quot;,          value: () =&gt; &#123;            const date = new Date();            date.setTime(date.getTime() - 3600 * 1000 * 24 * 7);            return date;          &#125;,        &#125;,      ],    &#125;;  &#125;,  methods: &#123;    disabledDate: (time) =&gt; &#123;      return time.getTime() &gt; Date.now();    &#125;,  &#125;,&#125;;&lt;/script&gt;&lt;style &gt;&lt;/style&gt;</code></pre><p><strong>组合式：</strong></p><pre><code class="vue">&lt;template&gt;  &lt;div&gt;    &lt;el-date-picker      v-model=&quot;value&quot;      type=&quot;date&quot;      placeholder=&quot;选一天吧&quot;      :disabled-date=&quot;disabledDate&quot;      :shortcuts=&quot;shortcuts&quot;    /&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import &#123; ref &#125; from &#39;vue&#39;export default &#123;  name: &quot;App&quot;,  setup() &#123;      const value = ref(&quot;&quot;);    const shortcuts = [      &#123;        text: &quot;Today&quot;,        value: new Date(),      &#125;,      &#123;        text: &quot;Yesterday&quot;,        value: () =&gt; &#123;          const date = new Date();          date.setTime(date.getTime() - 3600 * 1000 * 24);          return date;        &#125;,      &#125;,      &#123;        text: &quot;A week ago&quot;,        value: () =&gt; &#123;          const date = new Date();          date.setTime(date.getTime() - 3600 * 1000 * 24 * 7);          return date;        &#125;,      &#125;,    ];    const disabledDate = (time) =&gt; &#123;      return time.getTime() &gt; Date.now();    &#125;;    return &#123;value,shortcuts,disabledDate&#125;;  &#125;,  methods: &#123;    // disabledDate: (time) =&gt; &#123;    //   return time.getTime() &gt; Date.now();    // &#125;,  &#125;,&#125;;&lt;/script&gt;&lt;style &gt;&lt;/style&gt;</code></pre><h1 id="组合式API"><a href="#组合式API" class="headerlink" title="组合式API"></a>组合式API</h1><pre><code class="ts">&lt;template&gt;this is home &#123;&#123; count &#125;&#125;&lt;/template&gt;&lt;script lang=&quot;ts&quot; setup&gt;let count = ref(2);&lt;/script&gt; </code></pre><h1 id="组合式API的分离"><a href="#组合式API的分离" class="headerlink" title="组合式API的分离"></a>组合式API的分离</h1><p>新建composables文件夹</p><p>新建datapacker.js</p><pre><code class="js">import &#123; ref&#125; from &#39;vue&#39;export const value = ref(&quot;&quot;);export const shortcuts = [      &#123;        text: &quot;Today&quot;,        value: new Date(),      &#125;,      &#123;        text: &quot;Yesterday&quot;,        value: () =&gt; &#123;          const date = new Date();          date.setTime(date.getTime() - 3600 * 1000 * 24);          return date;        &#125;,      &#125;,      &#123;        text: &quot;A week ago&quot;,        value: () =&gt; &#123;          const date = new Date();          date.setTime(date.getTime() - 3600 * 1000 * 24 * 7);          return date;        &#125;,      &#125;,    ];    export const disabledDate = (time) =&gt; &#123;      return time.getTime() &gt; Date.now();    &#125;;</code></pre><p>App.vue组件中</p><pre><code class="vue">&lt;template&gt;  &lt;div&gt;    &lt;el-date-picker      v-model=&quot;value&quot;      type=&quot;date&quot;      placeholder=&quot;选一天吧&quot;      :disabled-date=&quot;disabledDate&quot;      :shortcuts=&quot;shortcuts&quot;    /&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import &#123;value,shortcuts,disabledDate&#125; from &quot;@/composables/datepacker.js&quot;export default &#123;  setup() &#123;   return &#123;value,shortcuts,disabledDate&#125;  &#125;,&#125;;&lt;/script&gt;&lt;style &gt;&lt;/style&gt;</code></pre><h1 id="完成登录页面"><a href="#完成登录页面" class="headerlink" title="完成登录页面"></a>完成登录页面</h1><p>App.vue</p><pre><code class="vue">&lt;template&gt;  &lt;div&gt;    &lt;el-row :gutter=&quot;20&quot;&gt;    &lt;el-col :span=&quot;6&quot;&gt;&lt;div class=&quot;grid-content bg-purple&quot; /&gt;&lt;/el-col&gt;    &lt;el-col :span=&quot;12&quot;&gt;      &lt;el-form :model=&quot;form&quot; label-width=&quot;120px&quot;&gt;    &lt;el-form-item label=&quot;用户名&quot;&gt;      &lt;el-input v-model=&quot;user.username&quot; /&gt;    &lt;/el-form-item&gt;    &lt;el-form-item label=&quot;密码&quot;&gt;    &lt;el-input v-model=&quot;user.password&quot; /&gt;    &lt;/el-form-item&gt;    &lt;el-form-item&gt;      &lt;el-button type=&quot;primary&quot; @click=&quot;login&quot;&gt;登录&lt;/el-button&gt;    &lt;/el-form-item&gt;    &lt;/el-form&gt;    &lt;/el-col&gt;    &lt;el-col :span=&quot;6&quot;&gt;&lt;div class=&quot;grid-content bg-purple&quot; /&gt;&lt;/el-col&gt;  &lt;/el-row&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  name: &#39;login&#39;,  data () &#123;    return &#123;      user: &#123;        username:&#39;&#39;,        password:&#39;&#39;      &#125;    &#125;;  &#125;, methods: &#123;   login()&#123;     if(this.user.username === &#39;root&#39;)&#123;       ElMessageBox.alert(&#39;登录成功&#39;, &#39;消息&#39;);       // this.$router.push(&quot;/main&quot;);      &#125;    &#125;  &#125;,&#125;&lt;/script&gt;&lt;style&gt;&lt;/style&gt;</code></pre><h2 id="完善登录页面"><a href="#完善登录页面" class="headerlink" title="完善登录页面"></a>完善登录页面</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue3</title>
      <link href="/2022/04/26/4-26/vue3/"/>
      <url>/2022/04/26/4-26/vue3/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-cli脚手架"><a href="#vue-cli脚手架" class="headerlink" title="vue cli脚手架"></a>vue cli脚手架</h1><pre><code class="bash">npm install -g @vue/cli</code></pre><h1 id="创建一个vue项目"><a href="#创建一个vue项目" class="headerlink" title="创建一个vue项目"></a>创建一个vue项目</h1><pre><code class="bash">vue create project-name</code></pre><h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><h2 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a><strong>main.js</strong></h2><pre><code class="js">import &#123; createApp &#125; from &#39;vue&#39;import App from &#39;./App.vue&#39;// 根组件createApp(App).mount(&#39;#app&#39;)</code></pre><p><strong>main.js 会创建我们vue的实例，挂载会帮我们创建根组件的实例vm</strong></p><h2 id="APP-vue"><a href="#APP-vue" class="headerlink" title="APP.vue"></a>APP.vue</h2><pre><code class="js">&lt;template&gt;  &lt;img alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot;&gt;  &lt;HelloWorld msg=&quot;Welcome to Your Vue.js App&quot;/&gt;&lt;/template&gt;&lt;script&gt;import HelloWorld from &#39;./components/HelloWorld.vue&#39;export default &#123;  name: &#39;App&#39;,  components: &#123;    HelloWorld  &#125;&#125;&lt;/script&gt;&lt;style&gt;#app &#123;  font-family: Avenir, Helvetica, Arial, sans-serif;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;  text-align: center;  color: #2c3e50;  margin-top: 60px;&#125;&lt;/style&gt;</code></pre><h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><h1 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h1><p><a href="https://cn.vitejs.dev/">Vite</a> 是一个 web 开发构建工具，由于其原生 ES 模块导入方式，可以实现闪电般的冷服务器启动。</p><p>通过在终端中运行以下命令，可以使用 Vite 快速构建 Vue 项目。</p><p>使用 npm：</p><pre><code class="bash"># npm 6.x$ npm init vite@latest &lt;project-name&gt; --template vue# npm 7+，需要加上额外的双短横线$ npm init vite@latest &lt;project-name&gt; -- --template vue$ cd &lt;project-name&gt;$ npm install$ npm run serve/dev</code></pre><p>安装依赖</p><pre><code class="bash">npm install安装vue-routernpm install vue-router@4安装element-uinpm install --legacy-peer-deps element-ui --save安装 SASS 加载器cnpm install sass-loader node-sass --save-dev启动测试npm run serve/dev</code></pre><p>创建modules目录</p><p>在文件目录下 运行 webpack</p><p>创建index.html并引入</p><pre><code class="html">&lt;script src =&quot;dist/js/bundle.js&quot;&gt;&lt;/script&gt;</code></pre><h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><pre><code class="bash">npm add axois</code></pre><pre><code class="js">import axios from &#39;axios&#39;;mounted()&#123;    getData()&#123;      axios.get(&quot;xxx&quot;).then(res =&gt;&#123;      &#125;)    &#125;</code></pre><h1 id="vue-router"><a href="#vue-router" class="headerlink" title="vue_router"></a>vue_router</h1><p>安装vue-router到项目目录</p><pre><code class="bash">npm install vue-router@4 -s/安装在本地项目，在packge.json中</code></pre><p><code>use(router)</code>；</p><p><strong>使用cdn</strong></p><pre><code class="html">&lt;script src=&quot;https://unpkg.com/vue@3&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://unpkg.com/vue-router@4&quot;&gt;&lt;/script&gt;&lt;div id=&quot;app&quot;&gt;  &lt;h1&gt;Hello App!&lt;/h1&gt;  &lt;p&gt;    &lt;!-- use the router-link component for navigation. --&gt;    &lt;!-- specify the link by passing the `to` prop. --&gt;    &lt;!-- `&lt;router-link&gt;` will render an `&lt;a&gt;` tag with the correct `href` attribute --&gt;    &lt;router-link to=&quot;/&quot;&gt;Go to Home&lt;/router-link&gt;    &lt;router-link to=&quot;/about&quot;&gt;Go to About&lt;/router-link&gt;  &lt;/p&gt;  &lt;!-- route outlet --&gt;  &lt;!-- component matched by the route will render here --&gt;  &lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;</code></pre><p><strong>在Vue脚手架当中</strong></p><p><strong>main.js中</strong></p><pre><code class="js">import &#123; createApp &#125; from &#39;vue&#39;import App from &#39;./App.vue&#39;import &#123; createRouter, createWebHashHistory&#125; from &#39;vue-router&#39; //从vue-router中解构 花括号中的两个方法import Hhome from &#39;./components/Hhome.vue&#39;import Ahbout from &#39;./components/Ahbout.vue&#39;// 2. 定义一些路由// 每个路由都需要映射到一个组件。// 我们后面再讨论嵌套路由。const routes = [    &#123; path: &#39;/&#39;, component: Hhome &#125;,    &#123; path: &#39;/about&#39;, component: Ahbout &#125;,]// 3. 创建路由实例并传递 `routes` 配置// 你可以在这里输入更多的配置，但我们在这里// 暂时保持简单const router = createRouter(&#123;    // 4. 内部提供了 history 模式的实现。为了简单起见，我们在这里使用 hash 模式。    history: createWebHashHistory(),    routes, // `routes: routes` 的缩写&#125;)// 根组件let app = createApp(App).use(router);app.mount(&#39;#app&#39;)</code></pre><p><strong>APP.vue中</strong></p><pre><code class="vue">&lt;template&gt;  &lt;img alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot; /&gt;  &lt;h1&gt;Hello App!&lt;/h1&gt;  &lt;p&gt;    &lt;!-- use the router-link component for navigation. --&gt;    &lt;!-- specify the link by passing the `to` prop. --&gt;    &lt;!-- `&lt;router-link&gt;` will render an `&lt;a&gt;` tag with the correct `href` attribute --&gt;    &lt;router-link to=&quot;/&quot;&gt;Go to Home&lt;/router-link&gt;    &lt;router-link to=&quot;/about&quot;&gt;Go to About&lt;/router-link&gt;  &lt;/p&gt;  &lt;!-- route outlet --&gt;  &lt;!-- component matched by the route will render here --&gt;  &lt;router-view&gt;&lt;/router-view&gt;&lt;/template&gt;&lt;script&gt;import home from &quot;./components/Hhome.vue&quot;;import about from &quot;./components/Ahbout.vue&quot;;export default &#123;  name: &quot;App&quot;,  components: &#123;    home,    about  &#125;,&#125;;&lt;/script&gt;&lt;style&gt;#app &#123;  font-family: Avenir, Helvetica, Arial, sans-serif;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;  text-align: center;  color: #2c3e50;  margin-top: 60px;&#125;&lt;/style&gt;</code></pre><p><strong>代码改造</strong></p><p>解决路由过多</p><ul><li>新建router目录，在其下新建index.js改造代码</li></ul><pre><code class="js">//完成路由相关的工作import &#123; createRouter, createWebHashHistory&#125; from &#39;vue-router&#39; //从vue-router中解构 花括号中的两个方法import Hhome from &#39;../components/Hhome.vue&#39;import Ahbout from &#39;../components/Ahbout.vue&#39;// 2. 定义一些路由// 每个路由都需要映射到一个组件。// 我们后面再讨论嵌套路由。const routes = [    &#123; path: &#39;/&#39;, component: Hhome &#125;,    &#123; path: &#39;/about&#39;, component: Ahbout &#125;,]// 3. 创建路由实例并传递 `routes` 配置// 你可以在这里输入更多的配置，但我们在这里// 暂时保持简单const router = createRouter(&#123;    // 4. 内部提供了 history 模式的实现。为了简单起见，我们在这里使用 hash 模式。    history: createWebHashHistory(),    routes, // `routes: routes` 的缩写&#125;)//暴露一个router方法给main.jsexport default router</code></pre><ul><li><strong>main.js中</strong></li></ul><pre><code class="js">import &#123; createApp &#125; from &#39;vue&#39;import App from &#39;./App.vue&#39;import router from &#39;./router&#39;// 根组件app.use(router);</code></pre><p>这样分工就十分明确了！</p><h2 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h2><p>router下的index.js</p><pre><code class="js">&#123;path: &#39;/user/:id&#39;, component: use&#125;</code></pre><p>通过组件传参</p><pre><code class="js">&lt;div&gt;my id is &#123;&#123;$router.params.id&#125;&#125;&lt;/div&gt;</code></pre><p>总组件中</p><pre><code class="vue">&lt;template&gt;&lt;router-link to=&quot;/user/13&quot;&gt;13&lt;/router-link&gt; | &lt;router-link to=&quot;/user/12&quot;&gt;12&lt;/router-link&gt; |&lt;/template&gt;</code></pre><h3 id="一些语法"><a href="#一些语法" class="headerlink" title="一些语法"></a>一些语法</h3><p><strong>通过自定义的正则：</strong></p><p><code>path: &#39;/user/:id(//d+)&#39;</code> （&#x2F;&#x2F;d+）表示传入的参数只能是数字</p><p><strong>可重复的参数</strong></p><p><code>path: &#39;/user/:id(//d+)*&#39;</code> 在其后面加*符号，这提供了一个参数数组，而不是字符串    </p><p><strong>可选的参数</strong></p><p>在id后面加？ 可与可无</p><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>在user.vue组件中嵌套两个组件</p><p>user.vue中</p><pre><code class="vue">&lt;template&gt;  &lt;div&gt;    &lt;p&gt;hello&lt;/p&gt;     &lt;p&gt;  my id is &#123;&#123;$router.params.id&#125;&#125; &lt;/p&gt;      &lt;router-link v-bind:to=&quot;&#39;/user/&#39;+$router.params.id+&#39;/profile&#39;&quot;&gt;头像&lt;/router-link&gt;      &lt;router-link v-bind:to=&quot;&#39;/user/&#39;+$router.params.id+&#39;/posts&#39;&quot;&gt;岗位&lt;/router-link&gt;      &lt;router-view&gt;&lt;/router-view&gt;  &lt;/div&gt;&lt;/template&gt;</code></pre><p>router中的index.js中</p><pre><code class="js">&#123;        path: &#39;/user/:id&#39;,        component: user,        children: [            &#123;                // UserProfile will be rendered inside User&#39;s &lt;router-view&gt;                // when /user/:id/profile is matched                path: &#39;profile&#39;,                component: UserProfile,            &#125;,            &#123;                // UserPosts will be rendered inside User&#39;s &lt;router-view&gt;                // when /user/:id/posts is matched                path: &#39;posts&#39;,                component: UserPosts,            &#125;,        ]    &#125;</code></pre><h1 id="命名路线"><a href="#命名路线" class="headerlink" title="命名路线"></a>命名路线</h1><p>除了<code>path</code>，您还可以提供<code>name</code>任何路线。这具有以下优点：</p><ul><li>没有硬编码的 URL</li><li>自动编码&#x2F;解码<code>params</code></li><li>防止您在网址中出现拼写错误</li><li>绕过路径排名（例如显示 a ）</li></ul><pre><code class="js">const routes = [  &#123;    path: &#39;/user/:username&#39;,    name: &#39;user&#39;,    component: User  &#125;]</code></pre><p>要链接到命名路由，您可以将对象传递给<code>router-link</code>组件的<code>to</code>prop：</p><pre><code class="vue">&lt;router-link :to=&quot;&#123; name: &#39;user&#39;, params: &#123; username: &#39;erina&#39; &#125;&#125;&quot;&gt;  User&lt;/router-link&gt;</code></pre><h1 id="命名视图"><a href="#命名视图" class="headerlink" title="命名视图"></a>命名视图</h1><p>有时您需要同时显示多个视图而不是嵌套它们，例如创建一个带有<code>sidebar</code>视图和<code>main</code>视图的布局。这就是命名视图派上用场的地方。您可以拥有多个并为每个插座命名，而不是在您的视图中只有一个插座。没有名字的 A<code>router-view</code>将<code>default</code>作为它的名字。</p><pre><code class="vue">&lt;router-view class=&quot;view left-sidebar&quot; name=&quot;LeftSidebar&quot;&gt;&lt;/router-view&gt;&lt;router-view class=&quot;view main-content&quot;&gt;&lt;/router-view&gt;&lt;router-view class=&quot;view right-sidebar&quot; name=&quot;RightSidebar&quot;&gt;&lt;/router-view&gt;</code></pre><p>一个视图是使用一个组件来渲染的，因此多个视图需要多个组件用于同一条路线。确保使用<code>components</code>（带有<strong>s</strong>）选项：</p><pre><code class="js">const router = createRouter(&#123;  history: createWebHashHistory(),  routes: [    &#123;      path: &#39;/&#39;,      components: &#123;        default: Home,        // short for LeftSidebar: LeftSidebar        LeftSidebar,        // they match the `name` attribute on `&lt;router-view&gt;`        RightSidebar,      &#125;,    &#125;,  ],&#125;)</code></pre><h2 id="嵌套命名视图"><a href="#嵌套命名视图" class="headerlink" title="嵌套命名视图"></a>嵌套命名视图</h2><p>可以使用带有嵌套视图的命名视图来创建复杂的布局。这样做时，您还需要为嵌套<code>router-view</code>命名。让我们以设置面板为例：</p><pre><code>/settings/emails                                       /settings/profile+-----------------------------------+                  +------------------------------+| UserSettings                      |                  | UserSettings                 || +-----+-------------------------+ |                  | +-----+--------------------+ || | Nav | UserEmailsSubscriptions | |  +------------&gt;  | | Nav | UserProfile        | || |     +-------------------------+ |                  | |     +--------------------+ || |     |                         | |                  | |     | UserProfilePreview | || +-----+-------------------------+ |                  | +-----+--------------------+ |+-----------------------------------+                  +------------------------------+</code></pre><ul><li><code>Nav</code>只是一个常规组件</li><li><code>UserSettings</code>是父视图组件</li><li><code>UserEmailsSubscriptions</code>, <code>UserProfile</code>,<code>UserProfilePreview</code>是嵌套视图组件</li></ul><p><strong>注意</strong>：<em>让我们忘记 HTML&#x2F;CSS 应该如何表示这种布局并关注所使用的组件。</em></p><p>上述布局中的组件<code>&lt;template&gt;</code>部分<code>UserSettings</code>如下所示：</p><pre><code class="vue">&lt;!-- UserSettings.vue --&gt;&lt;div&gt;  &lt;h1&gt;User Settings&lt;/h1&gt;  &lt;NavBar /&gt;  &lt;router-view /&gt;  &lt;router-view name=&quot;helper&quot; /&gt;&lt;/div&gt;</code></pre><p>然后你可以用这个路由配置来实现上面的布局：</p><pre><code class="js">&#123;  path: &#39;/settings&#39;,  // You could also have named views at the top  component: UserSettings,  children: [&#123;    path: &#39;emails&#39;,    component: UserEmailsSubscriptions  &#125;, &#123;    path: &#39;profile&#39;,    components: &#123;      default: UserProfile,      helper: UserProfilePreview    &#125;  &#125;]&#125;</code></pre><h2 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h2><p>除了使用 <code>&lt;router-link&gt;</code> 创建 a 标签来定义导航链接，我们还可以借助 router 的实例方法，通过编写代码来实现。</p><p>导航到不同的位置</p><p><strong>注意：在 Vue 实例中，你可以通过 <code>$router</code> 访问路由实例。因此你可以调用 <code>this.$router.push</code>。</strong></p><p>想要导航到不同的 URL，可以使用 <code>router.push</code> 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，会回到之前的 URL。</p><p>当你点击 <code>&lt;router-link&gt;</code> 时，内部会调用这个方法，所以点击 <code>&lt;router-link :to=&quot;...&quot;&gt;</code> 相当于调用 <code>router.push(...)</code> ：</p><table><thead><tr><th>声明式</th><th>编程式</th></tr></thead><tbody><tr><td><code>&lt;router-link :to=&quot;...&quot;&gt;</code></td><td><code>router.push(...)</code></td></tr></tbody></table><p>该方法的参数可以是一个字符串路径，或者一个描述地址的对象。例如：</p><pre><code>// 字符串路径router.push(&#39;/users/eduardo&#39;)// 带有路径的对象router.push(&#123; path: &#39;/users/eduardo&#39; &#125;)// 命名的路由，并加上参数，让路由建立 urlrouter.push(&#123; name: &#39;user&#39;, params: &#123; username: &#39;eduardo&#39; &#125; &#125;)// 带查询参数，结果是 /register?plan=privaterouter.push(&#123; path: &#39;/register&#39;, query: &#123; plan: &#39;private&#39; &#125; &#125;)// 带 hash，结果是 /about#teamrouter.push(&#123; path: &#39;/about&#39;, hash: &#39;#team&#39; &#125;)</code></pre><p><strong>注意</strong>：如果提供了 <code>path</code>，<code>params</code> 会被忽略，上述例子中的 <code>query</code> 并不属于这种情况。取而代之的是下面例子的做法，你需要提供路由的 <code>name</code> 或手写完整的带有参数的 <code>path</code> ：</p><pre><code>const username = &#39;eduardo&#39;// 我们可以手动建立 url，但我们必须自己处理编码router.push(`/user/$&#123;username&#125;`) // -&gt; /user/eduardo// 同样router.push(&#123; path: `/user/$&#123;username&#125;` &#125;) // -&gt; /user/eduardo// 如果可能的话，使用 `name` 和 `params` 从自动 URL 编码中获益router.push(&#123; name: &#39;user&#39;, params: &#123; username &#125; &#125;) // -&gt; /user/eduardo// `params` 不能与 `path` 一起使用router.push(&#123; path: &#39;/user&#39;, params: &#123; username &#125; &#125;) // -&gt; /user</code></pre><p>由于属性 <code>to</code> 与 <code>router.push</code> 接受的对象种类相同，所以两者的规则完全相同。</p><p><code>router.push</code> 和所有其他导航方法都会返回一个 <em>Promise</em>，让我们可以等到导航完成后才知道是成功还是失败。我们将在 <a href="https://router.vuejs.org/zh/guide/advanced/navigation-failures.html">Navigation Handling</a> 中详细介绍。</p><p>替换当前位置</p><p>它的作用类似于 <code>router.push</code>，唯一不同的是，它在导航时不会向 history 添加新记录，正如它的名字所暗示的那样——它取代了当前的条目。</p><table><thead><tr><th>声明式</th><th>编程式</th></tr></thead><tbody><tr><td><code>&lt;router-link :to=&quot;...&quot; replace&gt;</code></td><td><code>router.replace(...)</code></td></tr></tbody></table><p>也可以直接在传递给 <code>router.push</code> 的 <code>routeLocation</code> 中增加一个属性 <code>replace: true</code> ：</p><pre><code>router.push(&#123; path: &#39;/home&#39;, replace: true &#125;)// 相当于router.replace(&#123; path: &#39;/home&#39; &#125;)</code></pre><p>横跨历史</p><p>该方法采用一个整数作为参数，表示在历史堆栈中前进或后退多少步，类似于 <code>window.history.go(n)</code>。</p><p>例子</p><pre><code>// 向前移动一条记录，与 router.forward() 相同router.go(1)// 返回一条记录，与router.back() 相同router.go(-1)// 前进 3 条记录router.go(3)// 如果没有那么多记录，静默失败router.go(-100)router.go(100)</code></pre><p>篡改历史</p><p>你可能已经注意到，<code>router.push</code>、<code>router.replace</code> 和 <code>router.go</code> 是 <a href="https://developer.mozilla.org/en-US/docs/Web/API/History"><code>window.history.pushState</code>、<code>window.history.replaceState</code> 和 <code>window.history.go</code></a> 的翻版，它们确实模仿了 <code>window.history</code> 的 API。</p><p>因此，如果你已经熟悉 <a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API">Browser History APIs</a>，在使用 Vue Router 时，操作历史记录就会觉得很熟悉。</p><p>值得一提的是，无论在创建路由器实例时传递什么样的<a href="https://router.vuejs.org/zh/api/#history"><code>history</code> 配置</a>，Vue Router 的导航方法(<code>push</code>、<code>replace</code>、<code>go</code>)都能始终如一地工作。</p><h2 id="重定向和别名"><a href="#重定向和别名" class="headerlink" title="重定向和别名"></a>重定向和别名</h2><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向#"></a>重定向<a href="https://router.vuejs.org/zh/guide/essentials/redirect-and-alias.html#%E9%87%8D%E5%AE%9A%E5%90%91">#</a></h2><p>重定向也是通过 <code>routes</code> 配置来完成，下面例子是从 <code>/home</code> 重定向到 <code>/</code>：</p><pre><code class="js">const routes = [&#123; path: &#39;/home&#39;, redirect: &#39;/&#39; &#125;]</code></pre><p>重定向的目标也可以是一个命名的路由：</p><pre><code class="js">const routes = [&#123; path: &#39;/home&#39;, redirect: &#123; name: &#39;homepage&#39; &#125; &#125;]</code></pre><p>甚至是一个方法，动态返回重定向目标：</p><pre><code class="js">const routes = [  &#123;    // /search/screens -&gt; /search?q=screens    path: &#39;/search/:searchText&#39;,    redirect: to =&gt; &#123;      // 方法接收目标路由作为参数      // return 重定向的字符串路径/路径对象      return &#123; path: &#39;/search&#39;, query: &#123; q: to.params.searchText &#125; &#125;    &#125;,  &#125;,  &#123;    path: &#39;/search&#39;,    // ...  &#125;,]</code></pre><p>请注意，**<a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html">导航守卫</a>并没有应用在跳转路由上，而仅仅应用在其目标上**。在上面的例子中，在 <code>/home</code> 路由中添加 <code>beforeEnter</code> 守卫不会有任何效果。</p><p>在写 <code>redirect</code> 的时候，可以省略 <code>component</code> 配置，因为它从来没有被直接访问过，所以没有组件要渲染。唯一的例外是<a href="https://router.vuejs.org/zh/guide/essentials/nested-routes.html">嵌套路由</a>：如果一个路由记录有 <code>children</code> 和 <code>redirect</code> 属性，它也应该有 <code>component</code> 属性。</p><h3 id="相对重定向"><a href="#相对重定向" class="headerlink" title="相对重定向#"></a>相对重定向<a href="https://router.vuejs.org/zh/guide/essentials/redirect-and-alias.html#%E7%9B%B8%E5%AF%B9%E9%87%8D%E5%AE%9A%E5%90%91">#</a></h3><p>也可以重定向到相对位置：</p><pre><code class="js">const routes = [  &#123;    path: &#39;/users/:id/posts&#39;,    redirect: to =&gt; &#123;      // 方法接收目标路由作为参数      // return 重定向的字符串路径/路径对象    &#125;,  &#125;,]</code></pre><h2 id="别名"><a href="#别名" class="headerlink" title="别名#"></a>别名<a href="https://router.vuejs.org/zh/guide/essentials/redirect-and-alias.html#%E5%88%AB%E5%90%8D">#</a></h2><p>重定向是指当用户访问 <code>/home</code> 时，URL 会被 <code>/</code> 替换，然后匹配成 <code>/</code>。那么什么是别名呢？</p><p><strong>将 <code>/</code> 别名为 <code>/home</code>，意味着当用户访问 <code>/home</code> 时，URL 仍然是 <code>/home</code>，但会被匹配为用户正在访问 <code>/</code>。</strong></p><p>上面对应的路由配置为：</p><pre><code>const routes = [&#123; path: &#39;/&#39;, component: Homepage, alias: &#39;/home&#39; &#125;]</code></pre><p>通过别名，你可以自由地将 UI 结构映射到一个任意的 URL，而不受配置的嵌套结构的限制。使别名以 <code>/</code> 开头，以使嵌套路径中的路径成为绝对路径。你甚至可以将两者结合起来，用一个数组提供多个别名：</p><pre><code class="js">const routes = [  &#123;    path: &#39;/users&#39;,    component: UsersLayout,    children: [      // 为这 3 个 URL 呈现 UserList      // - /users      // - /users/list      // - /people      &#123; path: &#39;&#39;, component: UserList, alias: [&#39;/people&#39;, &#39;list&#39;] &#125;,    ],  &#125;,]</code></pre><p>如果你的路由有参数，请确保在任何绝对别名中包含它们：</p><pre><code class="js">const routes = [  &#123;    path: &#39;/users/:id&#39;,    component: UsersByIdLayout,    children: [      // 为这 3 个 URL 呈现 UserDetails      // - /users/24      // - /users/24/profile      // - /24      &#123; path: &#39;profile&#39;, component: UserDetails, alias: [&#39;/:id&#39;, &#39;&#39;] &#125;,    ],  &#125;,]</code></pre><h2 id="路由组件传参"><a href="#路由组件传参" class="headerlink" title="路由组件传参"></a>路由组件传参</h2><p>将 props 传递给路由组件<a href="https://router.vuejs.org/zh/guide/essentials/passing-props.html#%E5%B0%86-props-%E4%BC%A0%E9%80%92%E7%BB%99%E8%B7%AF%E7%94%B1%E7%BB%84%E4%BB%B6">#</a></p><p>在你的组件中使用 <code>$route</code> 会与路由紧密耦合，这限制了组件的灵活性，因为它只能用于特定的 URL。虽然这不一定是件坏事，但我们可以通过 <code>props</code> 配置来解除这种行为：</p><p>我们可以将下面的代码</p><pre><code class="js">const User = &#123;  template: &#39;&lt;div&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;&#39;&#125;const routes = [&#123; path: &#39;/user/:id&#39;, component: User &#125;]</code></pre><p>替换成</p><pre><code class="js">const User = &#123;  props: [&#39;id&#39;],  template: &#39;&lt;div&gt;User &#123;&#123; id &#125;&#125;&lt;/div&gt;&#39;&#125;const routes = [&#123; path: &#39;/user/:id&#39;, component: User, props: true &#125;]</code></pre><h3 id="布尔模式"><a href="#布尔模式" class="headerlink" title="布尔模式#"></a>布尔模式<a href="https://router.vuejs.org/zh/guide/essentials/passing-props.html#%E5%B8%83%E5%B0%94%E6%A8%A1%E5%BC%8F">#</a></h3><p>当 <code>props</code> 设置为 <code>true</code> 时，<code>route.params</code> 将被设置为组件的 props。</p><h3 id="命名视图-1"><a href="#命名视图-1" class="headerlink" title="命名视图#"></a>命名视图<a href="https://router.vuejs.org/zh/guide/essentials/passing-props.html#%E5%91%BD%E5%90%8D%E8%A7%86%E5%9B%BE">#</a></h3><p>对于有命名视图的路由，你必须为每个命名视图定义 <code>props</code> 配置：</p><pre><code>const routes = [  &#123;    path: &#39;/user/:id&#39;,    components: &#123; default: User, sidebar: Sidebar &#125;,    props: &#123; default: true, sidebar: false &#125;  &#125;]</code></pre><h3 id="对象模式"><a href="#对象模式" class="headerlink" title="对象模式#"></a>对象模式<a href="https://router.vuejs.org/zh/guide/essentials/passing-props.html#%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%BC%8F">#</a></h3><p>当 <code>props</code> 是一个对象时，它将原样设置为组件 props。当 props 是静态的时候很有用。</p><pre><code>const routes = [  &#123;    path: &#39;/promotion/from-newsletter&#39;,    component: Promotion,    props: &#123; newsletterPopup: false &#125;  &#125;]</code></pre><h3 id="函数模式"><a href="#函数模式" class="headerlink" title="函数模式#"></a>函数模式<a href="https://router.vuejs.org/zh/guide/essentials/passing-props.html#%E5%87%BD%E6%95%B0%E6%A8%A1%E5%BC%8F">#</a></h3><p>你可以创建一个返回 props 的函数。这允许你将参数转换为其他类型，将静态值与基于路由的值相结合等等。</p><pre><code>const routes = [  &#123;    path: &#39;/search&#39;,    component: SearchUser,    props: route =&gt; (&#123; query: route.query.q &#125;)  &#125;]</code></pre><p>URL <code>/search?q=vue</code> 将传递 <code>&#123;query: &#39;vue&#39;&#125;</code> 作为 props 传给 <code>SearchUser</code> 组件。</p><p>请尽可能保持 <code>props</code> 函数为无状态的，因为它只会在路由发生变化时起作用。如果你需要状态来定义 props，请使用包装组件，这样 vue 才可以对状态变化做出反应。</p><h2 id="不同的历史记录模式"><a href="#不同的历史记录模式" class="headerlink" title="不同的历史记录模式"></a>不同的历史记录模式</h2><h3 id="官方推荐HTML5模式"><a href="#官方推荐HTML5模式" class="headerlink" title="官方推荐HTML5模式"></a>官方推荐HTML5模式</h3><pre><code class="js">import &#123; createRouter, createWebHistory &#125; from &#39;vue-router&#39;const router = createRouter(&#123;  history: createWebHistory(),  routes: [    //...  ],&#125;)</code></pre><p>当使用这种历史模式时，URL 会看起来很 “正常”，例如 <code>https://example.com/user/id</code>。漂亮!</p><p>不过，问题来了。由于我们的应用是一个单页的客户端应用，如果没有适当的服务器配置，用户在浏览器中直接访问 <code>https://example.com/user/id</code>，就会得到一个 404 错误。这就丑了。</p><p>不用担心：要解决这个问题，你需要做的就是在你的服务器上添加一个简单的回退路由。如果 URL 不匹配任何静态资源，它应提供与你的应用程序中的 <code>index.html</code> 相同的页面。漂亮依旧!</p><h2 id="导航卫士"><a href="#导航卫士" class="headerlink" title="导航卫士"></a>导航卫士</h2><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p>Vuex 是一个为 Vue.js 应用程序开发的<strong>状态管理模式 + 库</strong>。它采用集中式存储管理应用程序的所有组件的状态，并以相应的规则保证以一种状态可发生变化的方式。</p><p>安装</p><pre><code class="bash">npm install vuex@next --save</code></pre><p>使用npm6再进行安装</p><pre><code class="bash">npx -p npm@6 npm i --legacy-peer-deps</code></pre><p>可以定义全局使用的参数，组件都能使用</p><pre><code class="js">// 创建一个新的 store 实例const store = createStore(&#123;    // 相当于一个data，所有组件全局都能访问    state () &#123;      return &#123;        count: 0      &#125;    &#125;,    mutations: &#123;      increment (state) &#123;        state.count++      &#125;    &#125;  &#125;)</code></pre><p>但又因为对全部组件实现了共享，就不应该放在具体的组件里</p><pre><code class="js">// 保存了对共享数据的修改逻辑    mutations: &#123;      increment (state) &#123;        state.count++      &#125;    &#125;  &#125;)</code></pre><p>具体方法中</p><pre><code class="vue">methods: &#123;  plus()&#123;   // 这就是对共享变量的一个操作逻辑   this.$store.commit(&#39;increment&#39;);  &#125; &#125;</code></pre><h2 id="async-和await"><a href="#async-和await" class="headerlink" title="async 和await"></a>async 和await</h2><p>await返回的是 return new promise 的函数并执行它</p><p>await只能放在async函数里</p><pre><code class="js">let fun1 = function()&#123;    let num = 10;    return new Promise((resolve,reject)=&gt;&#123;                setTimeout(()=&gt;&#123;            num+=20;            resolve(num);            &#125;,2000)    &#125;)&#125;let fun2 = async function()&#123;    let num = await fun1();    console.log(num);&#125;fun2();</code></pre><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>map State函数</p><p>当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 <code>mapState</code> 传一个字符串数组。</p><p>里面可以添加多个</p><pre><code class="js">computed: mapState([  // 映射 this.count 为 store.state.count  &#39;count&#39;])</code></pre><p><img src="/.io//image-20220430213053568.png" alt="image-20220430213053568"></p><p>可以拼接里面的对象</p><h2 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h2><pre><code class="js">  getters: &#123;    // 这样可以完成复用      doneCount(state)&#123;          return state.todos.filter(todo =&gt; todo.done ===true).length      &#125;  &#125;,</code></pre><p>属性多了，也可以像state那样，放在计算属性中，</p><h2 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h2><p>提交载荷（Payload）</p><h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><p>分发action</p><pre><code class="js"> actions: &#123;    increment (context) &#123;      context.commit(&#39;increment&#39;)    &#125;  &#125;</code></pre><p>触发：</p><p><code>   this.$store.dispatch(&#39;increment&#39;)</code></p><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><pre><code class="js">const moduleA = &#123;  state: () =&gt; (&#123; ... &#125;),  mutations: &#123; ... &#125;,  actions: &#123; ... &#125;,  getters: &#123; ... &#125;&#125;const moduleB = &#123;  state: () =&gt; (&#123; ... &#125;),  mutations: &#123; ... &#125;,  actions: &#123; ... &#125;&#125;const store = createStore(&#123;  modules: &#123;    a: moduleA,    b: moduleB  &#125;&#125;)store.state.a // -&gt; moduleA 的状态store.state.b // -&gt; moduleB 的状态</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2022/04/25/4-25/Vue/"/>
      <url>/2022/04/25/4-25/Vue/</url>
      
        <content type="html"><![CDATA[<p>网络通信: axios</p><p>网页跳转：vue_router</p><p>状态管理：vuex</p><p>Vue-UI: ICE ElementUI、</p><p>UI框架：iview Ant-Design、Bootstrap AmazeUI、layui、<strong>vue-element-admin</strong></p><p>JavaScript构建工具： <strong>WebPack</strong>:打包、压缩、合并、按序加载</p><h1 id="MVVM模型"><a href="#MVVM模型" class="headerlink" title="MVVM模型"></a>MVVM模型</h1><ul><li>view</li><li>model</li><li>view model</li></ul><h1 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h1><pre><code class="html">&lt;div id=&quot;app&quot;&gt;&lt;li v-for=&quot;item in items&quot;&gt;    &#123;&#123;item.message&#125;&#125;&lt;/li&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;    var vm = new Vue(&#123;        el:&quot;#app&quot;,        data: &#123;            items: [    &#123;message: &#39;xiaoliu&#39;&#125;,    &#123;message: &#39;xiaoliuu&#39;&#125;            ]        &#125;    &#125;);&lt;/script&gt;&lt;/body&gt;</code></pre><h1 id="鼠标悬停"><a href="#鼠标悬停" class="headerlink" title="鼠标悬停"></a>鼠标悬停</h1><pre><code class="html">&lt;div id=&quot;app&quot;&gt;    &lt;span v-bind:title=&quot;message&quot;&gt;        鼠标悬停几秒查看此处动态绑定的提示消息!&lt;/span&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;    var vm = new Vue(&#123;        el:&quot;#app&quot;,        data:&#123;            message:&quot;hello,vue&quot;        &#125;    &#125;);&lt;/script&gt;</code></pre><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><pre><code class="html">&lt;div id=&quot;app&quot;&gt;    &lt;button v-on:click=&quot;sayHi&quot;&gt;点我&lt;/button&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;    var vm = new Vue(&#123;        el:&quot;#app&quot;,        data: &#123;&#125;,        methods: &#123; //方法必须定义在methods方法对象中            sayHi: function () &#123;                alert(this.message)            &#125;        &#125;    &#125;);&lt;/script&gt;</code></pre><h1 id="Vue7大属性"><a href="#Vue7大属性" class="headerlink" title="Vue7大属性"></a>Vue7大属性</h1><p><strong>1.el属性</strong></p><p>用来指示vue编译器从什么地方开始解析 vue的语法，可以说是一个占位符。<br>相当于一个容器，跟上面的div id &#x3D; “app”做关联，从此以后上面div id &#x3D; “app”里面的内容要通过vue来渲染,都要经过vue处理才能看得到上面div里面的内容</p><p><strong>2.data属性</strong><br>用来组织从view中抽象出来的属性，可以说将视图的数据抽象出来存放在data中。<br>跟微信小程序一样，所有的变量都要写在data里面</p><p><strong>3.template属性</strong><br>用来设置模板，会替换页面元素，包括占位符。<br>Vue.component（）组件中会用到，其实很多地方都会用到</p><p><strong>4.methods属性</strong><br>放置页面中的业务逻辑，js方法一般都放置在methods中，用来写方法，函数的<br>computed后面会介绍<br>computed和methods是有区别的：computed是在值发生改变的时候才会触发效果，而methods只要刷新执行了就会触发，所有平时写VUE的时候，能用computed的尽量使用</p><p><strong>5.render属性</strong><br>创建真正的Virtual Dom</p><p><strong>6.computed属性</strong><br>用来计算<br>根据已经存在的属性计算出新的属性，对于同样的数据，会缓存。当其依赖属性的值发生变化是，这个属性的值会自动更新，与之相关的DOM部份也会同步自动更新。其实一般情况，我也会把一些关于逻辑的代码都写在computed中。</p><p><strong>7.watch侦听属性</strong><br>watch:function(new,old){}<br>监听data中数据的变化<br>两个参数，一个返回新值，一个返回旧值<br>当你有一些数据需要随着其它数据变动而变动时或者执行异步操作或开销较大操作时，建议使用watch<br>computed和watch是有区别的：<br>watch: 监视,能够监听到数据的变化,只要数据变化的时候,都会自定执行对应的方法,其中可以检测的数据来源分为三部分 data , computed , props computed: 计算属性,存在一个计算缓存的特性,每一次计算之后,只要里面的逻辑不发生变化,每一次重复调用,都会使用上一次执行的结果,能够节省计算的时间</p><p>在表单实现数据的双向绑定</p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;    &lt;textarea name=&quot;&quot; id=&quot;&quot; cols=&quot;30&quot; rows=&quot;10&quot; v-model=&quot;message&quot;&gt;&lt;/textarea&gt;    &#123;&#123;message&#125;&#125;&lt;/div&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;    var vm = new Vue(&#123;        el:&quot;#app&quot;,        data: &#123;            message:&#39;&#39;        &#125;,    &#125;);&lt;/script&gt;</code></pre><p><strong>同步输入框</strong></p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;    性别：    &lt;input type=&quot;radio&quot;  name=&quot;sex&quot; value=&quot;男&quot; v-model=&quot;message&quot;&gt; 男    &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;女&quot; v-model=&quot;message&quot;&gt; 女    &lt;p&gt;选中了：&#123;&#123;message&#125;&#125;&lt;/p&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;    var vm = new Vue(&#123;        el:&quot;#app&quot;,        data: &#123;            message:&#39;&#39;        &#125;,    &#125;);&lt;/script&gt;</code></pre><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p>自定义组件获取值：</p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;&lt;xiaoliu v-for=&quot;item in items&quot; v-bind:item=&quot;item&quot;&gt;&lt;/xiaoliu&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;    Vue.component(&quot;xiaoliu&quot;,&#123;        props: [&#39;item&#39;],        template: &#39;&lt;h1&gt;&#123;&#123;item&#125;&#125;&lt;/h1&gt;&#39; //模板    &#125;)    var vm = new Vue(&#123;        el:&quot;#app&quot;,        data: &#123;            message:&#39;&#39;,            items: [&quot;xiaoliu&quot;,&quot;xiaoliuu&quot;,&quot;xiaoliuuu&quot;]        &#125;,    &#125;);&lt;/script&gt;</code></pre><h1 id="Axios异步通信"><a href="#Axios异步通信" class="headerlink" title="Axios异步通信"></a>Axios异步通信</h1><p>json数据：</p><pre><code class="json">&#123;  &quot;name&quot;:&quot;狂神说java&quot;,  &quot;url&quot;: &quot;http://baidu.com&quot;,  &quot;page&quot;: &quot;1&quot;,  &quot;isNonProfit&quot;:&quot;true&quot;,  &quot;address&quot;: &#123;    &quot;street&quot;: &quot;含光门&quot;,    &quot;city&quot;:&quot;陕西西安&quot;,    &quot;country&quot;: &quot;中国&quot;  &#125;,  &quot;links&quot;: [    &#123;      &quot;name&quot;: &quot;B站&quot;,      &quot;url&quot;: &quot;https://www.bilibili.com/&quot;    &#125;,    &#123;      &quot;name&quot;: &quot;4399&quot;,      &quot;url&quot;: &quot;https://www.4399.com/&quot;    &#125;,    &#123;      &quot;name&quot;: &quot;百度&quot;,      &quot;url&quot;: &quot;https://www.baidu.com/&quot;    &#125;  ]</code></pre><pre><code class="html">&lt;!--导入JS文件--&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</code></pre><pre><code class="html">&lt;div id=&quot;vue&quot;&gt;&lt;/div&gt;&lt;!--导入JS文件--&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/nmp/vue@2.5.21/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://unpkg.com/axios/dist/axios.min .js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;    var vm = new Vue(&#123;        el: &quot;#vue&quot;,        data()&#123;            return&#123;                info:&#123;                    name:null,                    address:&#123;                        street:null,                        city: null,                        country: null                    &#125;                &#125;            &#125;        &#125;,        mounted()&#123;//钩子函数，链式编程            axios.get(&#39;data.json&#39;).then(response=&gt;(this.info=response.data));        &#125;    &#125;);&lt;/script&gt;</code></pre><p><strong>解决数据闪烁问题</strong></p><pre><code class="html">&lt;style&gt;    [v-clock]&#123;        display: none;    &#125;&lt;/style&gt;</code></pre><p>在head标签内，没加载数据时白屏</p><h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><pre><code class="vue">computed:&#123;//计算属性 methods computed中能重名，优先调用方法    currentTime1: function () &#123;        return Date.now();    &#125;&#125;</code></pre><p>返回的是属性</p><h1 id="slot（插槽）"><a href="#slot（插槽）" class="headerlink" title="slot（插槽）"></a>slot（插槽）</h1><pre><code class="html">&lt;div id=&quot;vue&quot;&gt;    &lt;todo&gt;        &lt;todo-title slot=&quot;todo-title&quot; :title=&quot;title&quot;&gt;&lt;/todo-title&gt;        &lt;todo-item slot=&quot;todo-item&quot; v-for=&quot;items in item&quot; :item=&quot;items&quot;&gt;&lt;/todo-item&gt;    &lt;/todo&gt;&lt;/div&gt;&lt;!--导入JS文件--&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;    Vue.component(&quot;todo&quot;,&#123;        template:            &#39;&lt;div&gt;&#39; +            &#39;&lt;slot name=&quot;todo-title&quot;&gt;&lt;/slot&gt;&#39; +             &#39;&lt;ul&gt;&#39; +            &#39;&lt;slot name=&quot;todo-item&quot;&gt;&lt;/slot&gt;&#39; +            &#39;&lt;/ul&gt;&gt;&#39;               +                &#39;&lt;/div&gt;&#39;    &#125;);    Vue.component(&quot;todo-title&quot;,&#123;        props: [&#39;title&#39;],        template: &#39;&lt;div&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;&#39;    &#125;);    Vue.component(&quot;todo-item&quot;,&#123;        props: [&#39;item&#39;],        template: &#39;&lt;div&gt;&#123;&#123;item&#125;&#125; &lt;button @click=&quot;remove&quot;&gt;删除&lt;/button&gt; &lt;/div&gt;&#39;,        methods: &#123;            remove: function () &#123;                alert(&quot;删除成功&quot;)            &#125;        &#125;    &#125;);    var vm = new Vue(&#123;        el: &quot;#vue&quot;,        data: &#123;            title: &quot;xiaoliu&quot;,            todo: [&#39;效率&#39;,&#39;小刘&#39;],            item: [&#39;wo&#39;,&#39;we&#39;]        &#125;    &#125;);&lt;/script&gt;</code></pre><h1 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h1><p>删除操作要在组件中完成，涉及参数传递与事件分发，可以使用this.$emit( ‘ 自定义事件名 ‘ , 参数)</p><p><img src="/.io//image-20220426181505853.png" alt="image-20220426181505853"></p><pre><code class="html">&lt;div id=&quot;vue&quot;&gt;    &lt;todo&gt;        &lt;todo-title slot=&quot;todo-title&quot; :title=&quot;title&quot;&gt;&lt;/todo-title&gt;        &lt;todo-item slot=&quot;todo-item&quot; v-for=&quot;(items,index) in item&quot;                   :item=&quot;items&quot; v-bind:index=&quot;index&quot; v-on:remove=&quot;removeItem(index)&quot; :key=&quot;index&quot;&gt;&lt;/todo-item&gt;    &lt;/todo&gt;&lt;/div&gt;&lt;!--导入JS文件--&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;    Vue.component(&quot;todo&quot;,&#123;        template:            &#39;&lt;div&gt;&#39; +            &#39;&lt;slot name=&quot;todo-title&quot;&gt;&lt;/slot&gt;&#39; +             &#39;&lt;ul&gt;&#39; +            &#39;&lt;slot name=&quot;todo-item&quot;&gt;&lt;/slot&gt;&#39; +            &#39;&lt;/ul&gt;&gt;&#39;               +                &#39;&lt;/div&gt;&#39;    &#125;);    Vue.component(&quot;todo-title&quot;,&#123;        props: [&#39;title&#39;],        template: &#39;&lt;div&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;&#39;    &#125;);    Vue.component(&quot;todo-item&quot;,&#123;        props: [&#39;item&#39;,&#39;index&#39;],        template: &#39;&lt;div&gt;&#123;&#123;index&#125;&#125;----&#123;&#123;item&#125;&#125; &lt;button @click=&quot;remove&quot;&gt;删除&lt;/button&gt; &lt;/div&gt;&#39;,        methods: &#123;            remove: function (index) &#123;                this.$emit(&#39;remove&#39;,index);            &#125;        &#125;    &#125;);    var vm = new Vue(&#123;        el: &quot;#vue&quot;,        data: &#123;            title: &quot;xiaoliu&quot;,            todo: [&#39;效率&#39;,&#39;小刘&#39;],            item: [&#39;wo&#39;,&#39;we&#39;]        &#125;,        methods: &#123;            removeItem: function (index) &#123;                console.log(&quot;shanchu&quot;+this.item[index]+&quot;ok&quot;);                this.item.splice(index,1);            &#125;        &#125;    &#125;);&lt;/script&gt;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/24/4-24/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
      <url>/2022/04/24/4-24/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p><img src="/.io//image-20220424180020622.png" alt="image-20220424180020622"></p><p><img src="/.io//image-20220424180825127.png" alt="image-20220424180825127"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式-Dubbo-Zookeeper</title>
      <link href="/2022/04/23/4-23/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/"/>
      <url>/2022/04/23/4-23/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<p>安装zookeeper</p><p><a href="https://archive.apache.org/dist/zookeeper/zookeeper-3.7.0/">https://archive.apache.org/dist/zookeeper/zookeeper-3.7.0/</a></p><p>下载编译后二进制的包</p><p>运行bin目录下的zkServer.cmd windows下</p><p>闪退解决：修改配置文件 加个暂停(pause)查看错误的原因</p><p>原因是conf目录下没有 zoo.cfg 复制sample进行添加</p><p>连接服务zkServer.cmd</p><p>连接客户端zkCli.cmd</p><p>在项目中打包dubbo-admin</p><p><code>mvn clean package -Dmaven.test.skip=true</code></p><p>admin的地址为7001</p><p>默认账号密码都是 root</p><p>dubbo-admin是一个监控管理后台，查看我们哪些服务注册，被消费</p><p>zookeeper是 注册中心</p><p>导入依赖</p><pre><code class="xml">&lt;dependency&gt;  &lt;groupId&gt;com.github.sgroschupf&lt;/groupId&gt;  &lt;artifactId&gt;zkclient&lt;/artifactId&gt;  &lt;version&gt;0.1&lt;/version&gt;&lt;/dependency&gt;</code></pre><pre><code class="xml">&lt;dependency&gt;  &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;  &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;  &lt;version&gt;2.7.3&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>日志冲突</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;    &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;    &lt;version&gt;2.7.3&lt;/version&gt;    &lt;exclusions&gt;        &lt;exclusion&gt;            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;            &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;        &lt;/exclusion&gt;    &lt;/exclusions&gt;&lt;/dependency&gt;</code></pre><p>配置文件</p><pre><code class="properties">#服务应用名字dubbo.application.name=provider#注册中心地址dubbo.registry.address=zookeeper://127.0.1:2181#哪些服务需要被注册dubbo.scan.base-packages=com.xiaoliu.service</code></pre><p>接下来再导入依赖</p><pre><code class="xml">&lt;dependency&gt;  &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;  &lt;artifactId&gt;curator-recipes&lt;/artifactId&gt;  &lt;version&gt;2.12.0&lt;/version&gt;&lt;/dependency&gt;</code></pre><pre><code class="xml">&lt;dependency&gt;  &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;  &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;  &lt;version&gt;3.4.14&lt;/version&gt;  &lt;type&gt;pom&lt;/type&gt;&lt;/dependency&gt;</code></pre><p>这个需要排除sl4j的依赖</p><pre><code class="properties">#消费者需要去哪拿服务需要暴露名字dubbo.application.name=provider#去注册中心dubbo.registry.address=zookeeper://127.0.1:2181</code></pre><p>消费者业务接口</p><pre><code class="java">消费者生产者接口都必须相同    @Servicepublic class Service&#123;    @Reference//引用，Pom坐标，可以定义路径相同的接口名，远程引用    TicketService ticketService;        public void buyTicket()&#123;        String ticket = ticketService.getTicket();        System.out.println(&quot;拿到票&quot;+ticket);    &#125;&#125;</code></pre><p>1、提供者提供服务</p><p>​    1.导入依赖</p><p>​    2.配置注册中心地址，以及服务发现名，和要扫描的包</p><p>​    3.在想要被注册的服务上面 增加一个注解 @Service</p><p>2、消费者如何消费</p><p>​    1.导入依赖</p><p>​    2.配置注册中心地址，配置自己的服务名</p><p>​    3.从远程注入服务 @Reference</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>任务</title>
      <link href="/2022/04/23/4-23/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/"/>
      <url>/2022/04/23/4-23/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h1><p>在业务需要异步处理的方法加入注解 <code>@Async</code></p><p>在启动类加入 <code>@EnableAsync</code></p><p>在控制层加入加入业务即可</p><h1 id="邮件任务"><a href="#邮件任务" class="headerlink" title="邮件任务"></a>邮件任务</h1><p>这里用qq邮件</p><p>配置文件</p><pre><code class="properties">#开启加密验证spring.mail.properties.mail.smtp.ssl.enable=truespring.mail.username=1937589397@qq.comspring.mail.password=ixxxxxxxxxxbspring.mail.host=smtp.qq.com</code></pre><pre><code class="java">@Autowired    JavaMailSender mailSender;    @Test    void contextLoads() &#123;//        发送邮件//        发件人//        内容        SimpleMailMessage message = new SimpleMailMessage();        message.setSubject(&quot;小刘&quot;);        message.setText(&quot;hello&quot;);        message.setFrom(&quot;1937589397@qq.com&quot;);        message.setTo(&quot;1937589397@qq.com&quot;);        mailSender.send(message);    &#125;</code></pre><p>复杂邮件</p><pre><code class="java"> MimeMessage mimeMessage = mailSender.createMimeMessage();//        组装        MimeMessageHelper helper = new MimeMessageHelper(mimeMessage,true);        helper.setSubject(subject);        helper.setText(text,true);//        附件        helper.addAttachment(&quot;1.jpg&quot;,new File(&quot;D:\\壁纸\\5b8b4cf6143640c98cd46cd77d26f292.jpg&quot;));        helper.setTo(&quot;1937589397@qq.com&quot;);        helper.setFrom(&quot;1937589397@qq.com&quot;);        mailSender.send(mimeMessage);</code></pre><h1 id="定时执行任务"><a href="#定时执行任务" class="headerlink" title="定时执行任务"></a>定时执行任务</h1><pre><code class="java">TaskeScheduler 任务调度者TaskExecutor 认为执行者@EnableScueduling开启定时功能的注解在启动类@Scheduled 什么时候执行    Cron表达式</code></pre><pre><code class="java">@Servicepublic class ScheduleService &#123;//    cron表达//    秒 分 时 日 月 周几//    下面表达式表示是 每一周的每0秒执行//@Scheduled(cron = &quot;0 * * * * 0-7&quot;)//    下面表达的是 每一天天的16时 44分 执行    @Scheduled(cron = &quot;1 48 16 * * ?&quot;)//    30 0/5 10 18, * ? 每天 10点和18点 每隔五分钟执行一次    public void hello()&#123;        System.out.println(&quot;您被执行了&quot;);    &#125;&#125;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>swagger</title>
      <link href="/2022/04/22/4-22/swagger/"/>
      <url>/2022/04/22/4-22/swagger/</url>
      
        <content type="html"><![CDATA[<p>Swagger简介</p><p>前后端分离</p><p>Vue + SpringBoot</p><h1 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h1><p>最流行的API框架</p><p>在项目中使用swagger需要springfox；</p><ul><li>swagger2</li><li>ui</li></ul><h1 id="spirngboot集成swagger"><a href="#spirngboot集成swagger" class="headerlink" title="spirngboot集成swagger"></a>spirngboot集成swagger</h1><p>1、新建springweb项目</p><p>2、导入依赖</p><pre><code class="xml">&lt;dependency&gt;  &lt;groupId&gt;io.springfox&lt;/groupId&gt;  &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;  &lt;version&gt;3.0.0&lt;/version&gt;&lt;/dependency&gt;</code></pre><pre><code class="xml">&lt;dependency&gt;  &lt;groupId&gt;io.springfox&lt;/groupId&gt;  &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;  &lt;version&gt;3.0.0&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>3、配置swagger</p><pre><code class="JAVA">@Configuration@EnableSwagger2//开启swagger2public class SwaggerConfig &#123;&#125;</code></pre><p>测试页面</p><p><strong><a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></strong></p><p>swagger的bean实例 Docket</p><p>SwaggerConfig</p><pre><code class="java">package com.xiaoliu.config;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import springfox.documentation.RequestHandler;import springfox.documentation.builders.RequestHandlerSelectors;import springfox.documentation.service.ApiInfo;import springfox.documentation.service.Contact;import springfox.documentation.spi.DocumentationType;import springfox.documentation.spring.web.plugins.Docket;import springfox.documentation.swagger2.annotations.EnableSwagger2;import java.util.ArrayList;/** * @author: 61分 * @date: 2022/4/22 17:39 * @description: */@Configuration@EnableSwagger2//开启swagger2public class SwaggerConfig &#123;//    配置swagger的Docket bean实例    @Bean    public Docket docket()&#123;        return new Docket(DocumentationType.SWAGGER_2)                .apiInfo(apiInfo())    &#125;//    配置swagger信息=apiinfo    private ApiInfo apiInfo()&#123;        System.out.println(&quot;doswagger&quot;);//        作者信息        Contact contact = new Contact(&quot;xiaoliu&quot;, &quot;https://dddwah11.github.io/&quot;, &quot;1937589397@qq.com&quot;);        return new ApiInfo(                &quot;APIInfo&quot;,                &quot;swagger配置&quot;,                &quot;v1.0&quot;,                &quot;https://dddwah11.github.io/&quot;,                contact,                &quot;Apache 2.0&quot;,                &quot;http://www.apache.org/licenses/LINCENSE-2.0&quot;,                new ArrayList&lt;&gt;()        );    &#125;&#125;</code></pre><h1 id="Swagger配置扫描接口"><a href="#Swagger配置扫描接口" class="headerlink" title="Swagger配置扫描接口"></a>Swagger配置扫描接口</h1><p>Docket.select()</p><pre><code class="java">                .enable(false);//                .select()//                RequestHandlerSelectors配置需要扫描接口的方式//                basePackage指定要扫描的包//                any()扫描全部//                none()都不扫描//               withClassAnnotation;扫描类上的注解，参数是一个注解的反射对象//                withMethodAnnotation;扫描方法上的注解                    .apis(RequestHandlerSelectors.basePackage(&quot;com.xiaoliu.helloController&quot;))//                path()过滤路径                .build();</code></pre><p>配置是否启动swagger</p><pre><code class="java">            .enable(false);//不启动swagger            .select()</code></pre><p>我们希望swagger在生产环境中使用，在发布时不使用</p><ul><li>判断是不是生产环境 </li><li>注入 enable()</li></ul><pre><code class="java">    @Bean    public Docket docket(Environment environment)&#123;//        设置要显示的flag环境        Profiles profiles =Profiles.of(&quot;dev&quot;,&quot;test&quot;);//        获取项目环境//        通过environment.acceptsProfiles判断是否处在自己设定的环境        boolean b = environment.acceptsProfiles(profiles);        return new Docket(DocumentationType.SWAGGER_2)                .apiInfo(apiInfo())                .enable(b)</code></pre><p>配置文件中设置生产和发布环境</p><p>主配置文件设置</p><pre><code class="xml">spring.profiles.active=当前环境</code></pre><h1 id="swagger配置API文档分组"><a href="#swagger配置API文档分组" class="headerlink" title="swagger配置API文档分组"></a>swagger配置API文档分组</h1><pre><code class="java">.apiInfo(apiInfo()).groupName(&quot;hello&quot;)</code></pre><p>如何配置多个分组</p><pre><code class="java">@Beanpublic Docket docket1()&#123;    return new Docket(DocumentationType.SWAGGER_2).groupName(&quot;A&quot;);&#125;</code></pre><p><code>@ApiModel()//文档注释</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>shiro安全框架 -springboot中集成</title>
      <link href="/2022/04/21/4-21/shiro/"/>
      <url>/2022/04/21/4-21/shiro/</url>
      
        <content type="html"><![CDATA[<p>1、导入依赖</p><p>2、配置文件</p><p>3、应用程序</p><pre><code class="java">获取当前对象Subject currentUser = SecurityUtils.getSubject();获取当前sessionSession session = currentUser.getSession();判断用户是否被认证currentUser.isAuthenticated()获取当前认证currentUser.getPrincipal()    用户角色currentUser.hasRole  粗粒度    currentUser.isPermitted(&quot;lightsaber:wield&quot;)细粒度    currentUser.isPermitted(&quot;winnebago:drive:eagle5&quot;)登出currentUser.logout()    </code></pre><h1 id="shiro登录认证"><a href="#shiro登录认证" class="headerlink" title="shiro登录认证"></a>shiro登录认证</h1><p>1、创建realm对象，需要自定义类：</p><pre><code class="java">public class UserRealm extends AuthorizingRealm &#123;//授权    @Override    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;        System.out.println(&quot;授权doGetAuthorizationInfo&quot;);        return null;    &#125;//认证    @Override    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;        System.out.println(&quot;认证doGetAuthenticationInfo&quot;);        return null;    &#125;&#125;</code></pre><pre><code class="java">@Configurationpublic class shiroConfig &#123;//    ShiroFilterFactoryBean//    Manager//    创建realm对象    @Bean    public UserRealm userRealm()&#123;        return new UserRealm();    &#125;&#125;</code></pre><p>2、defaultWebSecurityManager</p><pre><code class="java">@Bean    public DefaultWebSecurityManager getDefaultWebSecurityManager(@Qualifier(&quot;userRealm&quot;) UserRealm userRealm)&#123;        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();        defaultWebSecurityManager.setRealm(userRealm);//        关联realm        return defaultWebSecurityManager;    &#125;</code></pre><p>3、shiroFiterFactoryBean</p><pre><code class="java">    @Bean(name = &quot;DefaultWebSecurityManager&quot;)    public ShiroFilterFactoryBean getShiroFilterFactoryBean(@Qualifier(&quot;DefaultWebSecurityManager&quot;) DefaultWebSecurityManager defaultWebSecurityManager)&#123;        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();//        关联webSecurityManager        shiroFilterFactoryBean.setSecurityManager(defaultWebSecurityManager);        return shiroFilterFactoryBean;    &#125;</code></pre><p>ShiroFilterFactoryBean </p><pre><code class="java">@Bean    public ShiroFilterFactoryBean getShiroFilterFactoryBean(@Qualifier(&quot;securityManager&quot;) DefaultWebSecurityManager defaultWebSecurityManager)&#123;        ShiroFilterFactoryBean bean = new ShiroFilterFactoryBean();//        关联webSecurityManager//        设置安全管理器        bean.setSecurityManager(defaultWebSecurityManager);//        添加shiro的内置过滤器        /*            anon:无需认证            authc: 必须认证            user: 必须拥有 记住我 功能才能实现            perms: 拥有对某个资源权限功能才能能访问            role: 拥有某个角色权限         */        Map&lt;String, String&gt; filterMap = new LinkedHashMap&lt;&gt;();        filterMap.put(&quot;/user/add&quot;,&quot;authc&quot;);        filterMap.put(&quot;/user/update&quot;,&quot;authc&quot;);        System.out.println(&quot;filterMap&quot;);       bean.setFilterChainDefinitionMap(filterMap);        return bean;    &#125;</code></pre><p>可在ShiroFilterFactoryBean 设置登录</p><p><code>bean.setLoginUrl(&quot;/toLogin&quot;);</code>                        </p><h1 id="shiro实现用户认证"><a href="#shiro实现用户认证" class="headerlink" title="shiro实现用户认证"></a>shiro实现用户认证</h1><p>在Controller中</p><pre><code class="java">@RequestMapping(&quot;/login&quot;)    public String login(String username,String password)&#123;        //        获取对象        Subject subject = SecurityUtils.getSubject();//        封装登录对象的数据为token        UsernamePasswordToken token = new UsernamePasswordToken(username, password);                subject.login(token);        try &#123;            subject.login(token);//执行登录方法，无异常就执行            return &quot;index&quot;;        &#125; catch (UnknownAccountException e) &#123;//用户名不存在            model.addAttribute(&quot;msg&quot;,&quot;用户名错误&quot;);            return &quot;login&quot;;        &#125; catch (IncorrectCredentialsException e)&#123;//密码不存在            model.addAttribute(&quot;msg&quot;,&quot;密码错误&quot;);            return &quot;login&quot;;        &#125; catch (LockedAccountException e)&#123;            model.addAttribute(&quot;msg&quot;,&quot;账号被锁定&quot;);            return &quot;login&quot;;        &#125;    &#125;</code></pre><p>UserRealm类中</p><pre><code class="java">@Override    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;        System.out.println(&quot;认证doGetAuthenticationInfo&quot;);//        用户名，密码，数据库中取        String username= &quot;root&quot;;        String password= &quot;123456&quot;;        UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;        if (!token.getUsername().equals(username))&#123;            return null;//抛出异常UnknownAccountException        &#125;//        密码认证shiro做        return new SimpleAuthenticationInfo(&quot;&quot;,password,&quot;&quot;);    &#125;</code></pre><h1 id="Shiro整合Mybatis"><a href="#Shiro整合Mybatis" class="headerlink" title="Shiro整合Mybatis"></a>Shiro整合Mybatis</h1><p>搭建脚手架并测试，通过再进行下面的测试</p><p>在UserRealm中导入业务层接口</p><pre><code class="java">@AutowiredUserService userService;</code></pre><pre><code class="java">//      连接数据库        UsernamePasswordToken userToken = (UsernamePasswordToken) authenticationToken;        User user = userService.queryUserByName(userToken.getUsername());        if (user==null)&#123;            //查无此人            return null;//UnknownAccountException        &#125;//        密码认证shiro做        return new SimpleAuthenticationInfo(&quot;&quot;,user.getPassword(),&quot;&quot;);    &#125;</code></pre><p>UserRealm类中</p><pre><code class="java">//      连接数据库        UsernamePasswordToken userToken = (UsernamePasswordToken) authenticationToken;        User user = userService.queryUserByName(userToken.getUsername());        if (user==null)&#123;            //查无此人            return null;//UnknownAccountException        &#125;//        加密：MD5加密，MD5盐值加密//        md5：xwefqbrb134513451223qwer md5+盐值： xwefqbrb134513451223qwerusername//        密码认证shiro做，加密了//        密码认证shiro做        return new SimpleAuthenticationInfo(&quot;&quot;,user.getPassword(),&quot;&quot;);    &#125;</code></pre><h1 id="Shiro请求授权实现"><a href="#Shiro请求授权实现" class="headerlink" title="Shiro请求授权实现"></a>Shiro请求授权实现</h1><p> 在shiroConfig类中</p><pre><code class="java">//        授权        filterMap.put(&quot;/user/add&quot;,&quot;perms[user:add]&quot;);</code></pre><p>设置未授权的请求</p><pre><code class="java">//       设置未授权的请求       bean.setUnauthorizedUrl(&quot;/noauth&quot;);</code></pre><p>设置Controller</p><pre><code class="java">@RequestMapping(&quot;/noauth&quot;)@ResponseBodypublic String unauthorized()&#123;        return &quot;未经授权无法访问该页面&quot;;&#125;</code></pre><p>编写controller层</p><pre><code class="java">@RequestMapping(&quot;/noauth&quot;)@ResponseBodypublic String unauthorized()&#123;        return &quot;未经授权无法访问该页面&quot;;&#125;</code></pre><h2 id="授权、"><a href="#授权、" class="headerlink" title="授权、"></a>授权、</h2><pre><code class="java">//授权    @Override    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;        System.out.println(&quot;授权doGetAuthorizationInfo&quot;);        SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();        info.addStringPermission(&quot;user:add&quot;);//这行是全部人都获取授权，想指定的人获得授权就注释这行        return info;    &#125;</code></pre><p>指定数据库中的某些用户获取数据</p><p>数据库中设定权限</p><p>UserRealm类中</p><pre><code class="java">//      拿到当前登录的对象        Subject subject = SecurityUtils.getSubject();        User currentUser = (User)subject.getPrincipal();//拿到user对象        info.addStringPermission(currentUser.getPerms());        return info;</code></pre><p>shiroConfig类中</p><pre><code class="java">filterMap.put(&quot;/user/add&quot;,&quot;perms[user:add]&quot;);filterMap.put(&quot;/user/update&quot;,&quot;perms[user:update]&quot;);</code></pre><h1 id="Shiro整合Thymeleaf"><a href="#Shiro整合Thymeleaf" class="headerlink" title="Shiro整合Thymeleaf"></a>Shiro整合Thymeleaf</h1><p>导入依赖 shiro-thymeleaf</p><pre><code class="xml">&lt;dependency&gt;  &lt;groupId&gt;com.github.theborakompanioni&lt;/groupId&gt;  &lt;artifactId&gt;thymeleaf-extras-shiro&lt;/artifactId&gt;  &lt;version&gt;2.1.0&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>在UserRealm类中</p><pre><code class="java">//    整合shirodialect：整合 th 和 shiro    @Bean    public ShiroDialect getshiroDialect()&#123;        return new ShiroDialect();    &#125;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>整合Mybatis</title>
      <link href="/2022/04/18/4-18/%E6%95%B4%E5%90%88%E4%B8%ADMybatis/"/>
      <url>/2022/04/18/4-18/%E6%95%B4%E5%90%88%E4%B8%ADMybatis/</url>
      
        <content type="html"><![CDATA[<p>准备工作：搭建环境并测试（导入包，配置文件，myabtis配置，编写sql）</p><h1 id="1、编写实体类"><a href="#1、编写实体类" class="headerlink" title="1、编写实体类"></a>1、编写实体类</h1><pre><code class="java">package com.xiaoliu.pojo;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;/** * @author: 61分 * @date: 2022/4/18 15:29 * @description: */@Data@AllArgsConstructor@NoArgsConstructorpublic class User &#123;    private Integer id;    private String name;    private String password;&#125;</code></pre><h1 id="2、编写接口"><a href="#2、编写接口" class="headerlink" title="2、编写接口"></a>2、编写接口</h1><pre><code class="java">package com.xiaoliu.mapper;/** * @author: 61分 * @date: 2022/4/18 15:32 * @description: */@org.apache.ibatis.annotations.Mapperpublic interface Mapper &#123;&#125;</code></pre><pre><code class="java">@Repository //Dao层 用该注解</code></pre><p>再到resource目录下配置xml文件</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper  PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;  &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.xiaoliu.mapper&quot;&gt;  &lt;select id=&quot;selectBlog&quot; resultType=&quot;User&quot;&gt;    select * from Blog where id = #&#123;id&#125;  &lt;/select&gt;&lt;/mapper&gt;</code></pre><p>在springboot中配置文件别名及mapper.xml文件</p><pre><code class="yaml">mybatis.type-aliases-package=com.xiaoliu.pojomybatis.mapper-locations=classpath:/mybatis/mapper/*.xml</code></pre><p>增删改查</p><pre><code class="xml">&lt;select id=&quot;queryUserListById&quot; resultType=&quot;User&quot;&gt;    select * from mybatis.user where id = #&#123;id&#125;&lt;/select&gt;&lt;select id=&quot;queryUserList&quot; resultType=&quot;User&quot;&gt;    select * from mybatis.user&lt;/select&gt;&lt;insert id=&quot;addUser&quot; parameterType=&quot;User&quot;&gt;    insert into mybatis.user (id, name, password) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;);&lt;/insert&gt;&lt;update id=&quot;updateUser&quot; parameterType=&quot;User&quot;&gt;    update mybatis.user    set name = #&#123;name&#125;,        password = #&#123;password&#125;    where id = #&#123;id&#125;;</code></pre><p>配置文件：</p><pre><code class="properties"># 应用名称spring.application.name=mybatisSpringboot# 数据库驱动：spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver# 数据源名称spring.datasource.name=defaultDataSource# 数据库连接地址spring.datasource.url=jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8# 数据库用户名&amp;密码：spring.datasource.username=rootspring.datasource.password=123456# 应用服务 WEB 访问端口server.port=8080mybatis.type-aliases-package=com.xiaoliu.pojomybatis.mapper-locations=classpath:/mybatis/mapper/*.xml</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>整合Druid</title>
      <link href="/2022/04/18/4-18/%E6%95%B4%E5%90%88druid/"/>
      <url>/2022/04/18/4-18/%E6%95%B4%E5%90%88druid/</url>
      
        <content type="html"><![CDATA[<h1 id="1、导入相关依赖"><a href="#1、导入相关依赖" class="headerlink" title="1、导入相关依赖"></a>1、导入相关依赖</h1><pre><code class="xml">&lt;dependency&gt;    &lt;groupId&gt;log4j&lt;/groupId&gt;    &lt;artifactId&gt;log4j&lt;/artifactId&gt;    &lt;version&gt;1.2.12&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;    &lt;artifactId&gt;druid&lt;/artifactId&gt;    &lt;version&gt;1.2.9&lt;/version&gt;&lt;/dependency&gt;</code></pre><h1 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h1><pre><code class="yml">type: com.alibaba.druid.pool.DruidDataSource  #SpringBoot默认是不注入这些的，需要自己绑定  #druid数据源专有配置  initialSize: 5  minIdle: 5  maxActive: 20  maxWait: 60000  timeBetweenEvictionRunsMillis: 60000  minEvictableIdleTimeMillis: 300000  validationQuery: SELECT 1 FROM DUAL  testWhileIdle: true  testOnBorrow: false  testOnReturn: false  poolPreparedStatements: true  #配置监控统计拦截的filters，stat：监控统计、log4j：日志记录、wall：防御sql注入  #如果允许报错，java.lang.ClassNotFoundException: org.apache.Log4j.Properity  #则导入log4j 依赖就行  filters: stat,wall,log4j  maxPoolPreparedStatementPerConnectionSize: 20  useGlobalDataSourceStat: true  connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</code></pre><p><strong>配置进去没用，也能进去，先放着</strong></p><h1 id="3、绑定配置文件"><a href="#3、绑定配置文件" class="headerlink" title="3、绑定配置文件"></a>3、绑定配置文件</h1><pre><code class="java">package com.xiaoliu.config;import com.alibaba.druid.pool.DruidDataSource;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import javax.sql.DataSource;/** * @author: 61分 * @date: 2022/4/18 14:33 * @description: */@Configurationpublic class DruidConfig &#123;    @ConfigurationProperties(prefix = &quot;spring.datasource&quot;)    @Bean    public DataSource DruidDataSource()&#123;        return new DruidDataSource();    &#125;&#125;</code></pre><h1 id="4、DruidConfig"><a href="#4、DruidConfig" class="headerlink" title="4、DruidConfig"></a>4、DruidConfig</h1><pre><code class="java">package com.xiaoliu.config;import com.alibaba.druid.pool.DruidDataSource;import com.alibaba.druid.support.http.StatViewServlet;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.boot.web.servlet.ServletRegistrationBean;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import javax.sql.DataSource;import java.util.HashMap;/** * @author: 61分 * @date: 2022/4/18 14:33 * @description: */@Configurationpublic class DruidConfig &#123;    @ConfigurationProperties(prefix = &quot;spring.datasource&quot;)    @Bean    public DataSource DruidDataSource()&#123;        return new DruidDataSource();    &#125;//    后台监控:web.xml//    springboot集成了servlet，没有web.xml 可以使用ServletRegistrationBean，注册    @Bean    public ServletRegistrationBean statViewServlet()&#123;        ServletRegistrationBean&lt;StatViewServlet&gt; bean = new ServletRegistrationBean&lt;&gt;(new StatViewServlet(), &quot;/druid/*&quot;);//        后台有人登陆，账号密码配置        HashMap&lt;String, String&gt; initParameter = new HashMap&lt;&gt;();//        设置参数        initParameter.put(&quot;loginUsername&quot;, &quot;admin&quot;);//默认的数值        initParameter.put(&quot;loginPassword&quot;,&quot;123456&quot;);//默认的数值//        允许谁访问        initParameter.put(&quot;allow&quot;,&quot;&quot;);//后面参数不写，任何人都能访问//        禁止谁访问         initParameter.put(&quot;xxx&quot;,&quot;ip地址&quot;);        bean.setInitParameters(initParameter);//设置初始化参数        return bean;    &#125;&#125;</code></pre><p><strong>过滤器</strong></p><pre><code class="java">//    filter    @Bean    public FilterRegistrationBean filterStart()&#123;        FilterRegistrationBean&lt;Filter&gt; bean = new FilterRegistrationBean&lt;&gt;();        bean.setFilter(new WebStatFilter());//        设置过滤请求        HashMap&lt;String, String&gt; initParameters = new HashMap&lt;&gt;();//        设置不统计的东西        initParameters.put(&quot;exclusions&quot;,&quot;*.js,*.css,/druid/*&quot;);        bean.setInitParameters(initParameters);        return bean;    &#125;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>springWeb-02开发</title>
      <link href="/2022/04/16/4-16/springboot-web-02/"/>
      <url>/2022/04/16/4-16/springboot-web-02/</url>
      
        <content type="html"><![CDATA[<h1 id="员工列表展示"><a href="#员工列表展示" class="headerlink" title="员工列表展示"></a>员工列表展示</h1><ul><li>提前公共页面<ul><li>&#96;th:replace&#x3D;”~{commons&#x2F;commons::sidebar&#96;&#96;</li><li>&#96;&#96;<div th:replace="~{commons/commons::tobbar}"></div>&#96;</li><li>如果要传参，可以直接使用（）传参，接受判断</li></ul></li><li>列表循坏展示</li></ul><p>&#96;<tbody><br>   <tr th:each="emp:${emps}"><br>      <td th:text="${emp.getId()}"></td><br>      <td th:text="${emp.getLastName()}"></td><br>      <td th:text="${emp.getEmail()}"></td><br>      <td th:text="${emp.getGender()==0?'女':'男'}"></td><br>      <td th:text="${emp.department.getDepartment()}"></td><br>      &lt;td th:text&#x3D;”$</tr></tbody></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>springWeb开发</title>
      <link href="/2022/04/16/4-16/springboot-web%E5%BC%80%E5%8F%91/"/>
      <url>/2022/04/16/4-16/springboot-web%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="1、首页配置：所有html页面使用thymeleaf接管："><a href="#1、首页配置：所有html页面使用thymeleaf接管：" class="headerlink" title="1、首页配置：所有html页面使用thymeleaf接管："></a>1、首页配置：所有html页面使用thymeleaf接管：</h1><p><code>url:@&#123;&#125;</code></p><p>首页：</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;   &lt;head&gt;      &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;      &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&gt;      &lt;meta name=&quot;description&quot; content=&quot;&quot;&gt;      &lt;meta name=&quot;author&quot; content=&quot;&quot;&gt;      &lt;title&gt;Signin Template for Bootstrap&lt;/title&gt;      &lt;!-- Bootstrap core CSS --&gt;      &lt;link th:href=&quot;@&#123;/css/bootstrap.min.css&#125;&quot; rel=&quot;stylesheet&quot;&gt;      &lt;!-- Custom styles for this template --&gt;      &lt;link th:href=&quot;@&#123;/css/signin.css&#125;&quot; rel=&quot;stylesheet&quot;&gt;   &lt;/head&gt;   &lt;body class=&quot;text-center&quot;&gt;      &lt;form class=&quot;form-signin&quot; action=&quot;dashboard.html&quot;&gt;         &lt;img class=&quot;mb-4&quot; th:src=&quot;@&#123;/img/bootstrap-solid.svg&#125;&quot; alt=&quot;&quot; width=&quot;72&quot; height=&quot;72&quot;&gt;         &lt;h1 class=&quot;h3 mb-3 font-weight-normal&quot;&gt;Please sign in&lt;/h1&gt;         &lt;label class=&quot;sr-only&quot;&gt;Username&lt;/label&gt;         &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;Username&quot; required=&quot;&quot; autofocus=&quot;&quot;&gt;         &lt;label class=&quot;sr-only&quot;&gt;Password&lt;/label&gt;         &lt;input type=&quot;password&quot; class=&quot;form-control&quot; placeholder=&quot;Password&quot; required=&quot;&quot;&gt;         &lt;div class=&quot;checkbox mb-3&quot;&gt;            &lt;label&gt;          &lt;input type=&quot;checkbox&quot; value=&quot;remember-me&quot;&gt; Remember me        &lt;/label&gt;         &lt;/div&gt;         &lt;button class=&quot;btn btn-lg btn-primary btn-block&quot; type=&quot;submit&quot;&gt;Sign in&lt;/button&gt;         &lt;p class=&quot;mt-5 mb-3 text-muted&quot;&gt;© 2017-2018&lt;/p&gt;         &lt;a class=&quot;btn btn-sm&quot;&gt;中文&lt;/a&gt;         &lt;a class=&quot;btn btn-sm&quot;&gt;English&lt;/a&gt;      &lt;/form&gt;   &lt;/body&gt;&lt;/html&gt;</code></pre><p>controller：</p><pre><code class="java">package com.xiaoliu.config;import org.springframework.context.annotation.Configuration;import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;/** * @author: 61分 * @date: 2022/4/15 21:17 * @description: *///扩展 springmvc  dispatcherservlet@Configurationpublic class MyMvcConfig implements WebMvcConfigurer &#123;    //视图跳转    @Override    public void addViewControllers(ViewControllerRegistry registry) &#123;        registry.addViewController(&quot;/&quot;).setViewName(&quot;index&quot;);        registry.addViewController(&quot;/index.html&quot;).setViewName(&quot;index&quot;);    &#125;&#125;</code></pre><h2 id="2、页面国际化"><a href="#2、页面国际化" class="headerlink" title="2、页面国际化"></a>2、页面国际化</h2><p>i18n</p><p>设置login.properties文件，</p><p>login.tip</p><p>login.password</p><p>login.username</p><p>login.remember</p><p>怎么识别国际化</p><p>通过SpirngBoot——MessageSourceAutofiguration类</p><p>在配置application.properties</p><p><code>spring.messages.basename=i18n.login</code></p><p>thymeleaf国际化消息语法：<code>#&#123;&#125;</code></p><pre><code class="html">th:text=&quot;#&#123;login.password&#125;&quot;</code></pre><p>实现语言切换</p><pre><code class="html">th:href=&quot;@&#123;/index.html(l=&#39;zh_CN&#39;)&#125;&quot;&gt;中文</code></pre><pre><code class="html">th:href=&quot;@&#123;/index.html(l=&#39;en_US&#39;)&#125;&quot;&gt;Englis</code></pre><p>div自己的组件在config中的MyMvcConfig类中</p><p>并将其配置到springboot容器中 <code>@Bean</code></p><pre><code class="java">//    向容器中注入组件，自定义的国际化组件    @Bean    public LocaleResolver localeResolver()&#123;        return new MylocalResolver();    &#125;</code></pre><p>自定义的组件</p><pre><code class="java">package com.xiaoliu.config;import org.springframework.util.StringUtils;import org.springframework.web.servlet.LocaleResolver;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.util.Locale;/** * @author: 61分 * @date: 2022/4/16 15:22 * @description: */public class MylocalResolver implements LocaleResolver &#123;    @Override    public Locale resolveLocale(HttpServletRequest httpServletRequest) &#123;//      获取语言参数        String language = httpServletRequest.getParameter(&quot;l&quot;);        Locale locale = Locale.getDefault(); //如果没有就使用默认的//        如果请求中携带了地区化的参数        if (!StringUtils.isEmpty(language))&#123;//            分割 zh_CN            String[] split = language.split(&quot;_&quot;);//           国家 地区             locale = new Locale(split[0], split[1]);        &#125;        return locale;    &#125;    @Override    public void setLocale(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale) &#123;    &#125;&#125;</code></pre><h1 id="修改返回的url"><a href="#修改返回的url" class="headerlink" title="修改返回的url"></a>修改返回的url</h1><p>在自定义的视图跳转MyMvcConfig中</p><p>视图跳转到dashboard的时候 名字为：main.html</p><pre><code class="java">registry.addViewController(&quot;/main.html&quot;).setViewName(&quot;dashboard&quot;);</code></pre><p>在controller返回重定向的页面为&#x2F;main.html</p><pre><code class="java">if (!StringUtils.isEmpty(username) &amp;&amp; &quot;123&quot;.equals(password)) &#123;    return &quot;redirect:/main.html&quot;;</code></pre><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><p>在config中 编写LoginHandlerInterceptor拦截器</p><pre><code class="java">package com.xiaoliu.config;import org.springframework.web.servlet.HandlerInterceptor;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/** * @author: 61分 * @date: 2022/4/16 16:14 * @description: */public class LoginHandlerInterceptor implements HandlerInterceptor &#123;    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;//        登录之后应该有用户的session        Object loginUser = request.getSession().getAttribute(&quot;loginUser&quot;);        if (loginUser==null)&#123;            request.setAttribute(&quot;msg&quot;,&quot;没有权限，请先登录！&quot;);            request.getRequestDispatcher(&quot;/index.html&quot;).forward(request,response);            return false;        &#125;else return true;    &#125;&#125;</code></pre><p>在mvc类中重写拦截器</p><pre><code class="java">@Overridepublic void addInterceptors(InterceptorRegistry registry) &#123;    registry.addInterceptor(new LoginHandlerInterceptor())            .addPathPatterns(&quot;/**&quot;)//拦截的页面            .excludePathPatterns(&quot;/&quot;,&quot;/index.html&quot;,&quot;/user/login&quot;,&quot;/css/**&quot;,&quot;/js/**&quot;,&quot;/img/**&quot;);//不能被拦截的页面&#125;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>通过java自建数据表</title>
      <link href="/2022/04/16/4-16/%E5%9C%A8javav%E4%B8%AD%E5%BB%BA%E7%AB%8B%E6%95%B0%E6%8D%AE%E8%A1%A8/"/>
      <url>/2022/04/16/4-16/%E5%9C%A8javav%E4%B8%AD%E5%BB%BA%E7%AB%8B%E6%95%B0%E6%8D%AE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="建立一个员工部门表："><a href="#建立一个员工部门表：" class="headerlink" title="建立一个员工部门表："></a>建立一个员工部门表：</h1><h1 id="pojo"><a href="#pojo" class="headerlink" title="pojo:"></a>pojo:</h1><p><strong>Employee:</strong></p><pre><code class="java">package com.xiaoliu.pojo;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;import java.util.Date;/** * @author: 61分 * @date: 2022/4/15 23:12 * @description: */@Data@NoArgsConstructorpublic class Employee &#123;    private Integer id;    private String lastName;    private String email;    private Integer gender;    private Department department;    private Date birth;    public Employee(Integer id, String lastName, String email, Integer gender, Department department) &#123;        this.id = id;        this.lastName = lastName;        this.email = email;        this.gender = gender;        this.department = department;        this.birth = new Date();    &#125;&#125;</code></pre><p><strong>Department:</strong></p><pre><code class="java">package com.xiaoliu.pojo;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;/** * @author: 61分 * @date: 2022/4/15 22:17 * @description: */@Data@AllArgsConstructor@NoArgsConstructorpublic class Department &#123;    private Integer id;    private String department;&#125;</code></pre><h2 id="Dao层："><a href="#Dao层：" class="headerlink" title="Dao层："></a>Dao层：</h2><p><strong>EmployeeDao：</strong></p><pre><code class="java">package com.xiaoliu.dao;import com.xiaoliu.pojo.Department;import com.xiaoliu.pojo.Employee;import org.springframework.beans.factory.annotation.Autowired;import java.util.Collection;import java.util.HashMap;import java.util.Map;/** * @author: 61分 * @date: 2022/4/15 23:44 * @description: */public class EmployeeDao &#123;    private static Map&lt;Integer, Employee&gt; employees;    @Autowired    private DepartmentDao departmentDao;    static &#123;        employees = new HashMap&lt;Integer, Employee&gt;();//创建一个部门表        employees.put(1001, new Employee(1001,&quot;AA&quot;,&quot;A13151@ew.com&quot;,0,new Department(101,&quot;教学部&quot;)));        employees.put(1002, new Employee(1002,&quot;BB&quot;,&quot;B13151@ew.com&quot;,1,new Department(102,&quot;后勤部&quot;)));        employees.put(1003, new Employee(1003,&quot;CC&quot;,&quot;C13151@ew.com&quot;,0,new Department(103,&quot;保卫部&quot;)));        employees.put(1004, new Employee(1004,&quot;DD&quot;,&quot;D13151@ew.com&quot;,1,new Department(104,&quot;科研部&quot;)));        employees.put(1005, new Employee(1005,&quot;EE&quot;,&quot;E13151@ew.com&quot;,0,new Department(105,&quot;学生部&quot;)));    &#125;//    主键自增ID    private static Integer initId = 1006;//    增加一个员工    public void save(Employee employee)&#123;        if (employee.getId()==0)&#123;            employee.setId(initId++);        &#125;        employee.setDepartment(departmentDao.getDepartment(employee.getDepartment().getId()));        employees.put(employee.getId(),employee);    &#125;//    查询全部员工    public Collection&lt;Employee&gt; getAll()&#123;        return employees.values();    &#125;//    通过id查询员工    public Employee getById(Integer id)&#123;        return employees.get(id);    &#125;//    删除员工通过id    public Employee removeById(Integer id)&#123;        return employees.remove(id);    &#125;&#125;</code></pre><p><strong>DepartmentDao：</strong></p><pre><code class="java">package com.xiaoliu.dao;import com.xiaoliu.pojo.Department;import java.util.Collection;import java.util.HashMap;import java.util.Map;/** * @author: 61分 * @date: 2022/4/15 23:18 * @description: */public class DepartmentDao &#123;//    模拟数据库中的数据        private  static Map&lt;Integer, Department&gt; departments = null;    static &#123;        departments = new HashMap&lt;Integer, Department&gt;();//创建一个部门数据表        departments.put(101,new Department(101,&quot;教学部&quot;));        departments.put(102,new Department(102,&quot;后勤部&quot;));        departments.put(103,new Department(103,&quot;保卫部&quot;));        departments.put(104,new Department(104,&quot;科研部&quot;));        departments.put(105,new Department(105,&quot;学生部&quot;));    &#125;//    获得部门信息    public Collection&lt;Department&gt; getDepartments()&#123;        return departments.values();    &#125;//    通过id得到部门    public Department getDepartment(Integer id)&#123;        return departments.get(id);    &#125;&#125;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MVC配置原理及thymeleaf</title>
      <link href="/2022/04/15/4-15/thymeleaf%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/04/15/4-15/thymeleaf%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="MVC配置原理"><a href="#MVC配置原理" class="headerlink" title="MVC配置原理"></a>MVC配置原理</h1><p>如果想要div一些定制化的功能，只要写一个组件，然后将它交给springboot，springboot就会自动帮我们转配</p><pre><code class="java">package com.xiaoliu.config;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.web.servlet.View;import org.springframework.web.servlet.ViewResolver;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;import java.util.Locale;/** * @author: 61分 * @date: 2022/4/15 21:17 * @description: *///扩展 springmvc  dispatcherservlet@Configurationpublic class MyMvcConfig implements WebMvcConfigurer &#123;    @Bean    public ViewResolver myViewResolver()&#123;        return new myViewResolver();    &#125;//    自定义一个视图解析器    public static class myViewResolver implements ViewResolver &#123;        @Override        public View resolveViewName(String s, Locale locale) throws Exception &#123;            return null;        &#125;    &#125;&#125;</code></pre><p>基本的视图跳转</p><pre><code class="java">public class MyMvcConfig implements WebMvcConfigurer &#123;    //视图跳转    @Override    public void addViewControllers(ViewControllerRegistry registry) &#123;        registry.addViewController(&quot;/xiaoliu&quot;).setViewName(&quot;index&quot;);    &#125;&#125;</code></pre><p><strong>这样的话，视图跳转的文件，只能在templates，</strong>  <strong>而且thymeleaf也会失效</strong></p><p>如果要扩展的话，官方建议这样去做</p><p>springboot中，xxxConfiguraion 可以实现很多扩展</p><h1 id="thymeleaf"><a href="#thymeleaf" class="headerlink" title="thymeleaf"></a>thymeleaf</h1><p><strong>thymeleaf常用命名空间</strong>：</p><p>xmlns:th&#x3D;”<a href="http://www.thymeleaf.org&quot;/">http://www.thymeleaf.org&quot;</a><br>xmlns:sec&#x3D;”<a href="http://www.thymeleaf.org/extras/spring-security&quot;">http://www.thymeleaf.org/extras/spring-security&quot;</a><br>xmlns:shiro&#x3D;”<a href="http://www.pollix.at/thymeleaf/shiro&quot;">http://www.pollix.at/thymeleaf/shiro&quot;</a></p><html lang="en" xmlns:th="http://www.thymeleaf.org" xmlns:sec="http://www.thymeleaf.org/extras/spring-security" xmlns:shiro="http://www.pollix.at/thymeleaf/shiro"></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot Web开发</title>
      <link href="/2022/04/14/4-14/SpringBoot-Web%E5%BC%80%E5%8F%91/"/>
      <url>/2022/04/14/4-14/SpringBoot-Web%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="jar-webpp"><a href="#jar-webpp" class="headerlink" title="jar:webpp!"></a>jar:webpp!</h1><ul><li>导入静态资源</li><li>首页</li><li>jsp，模板引擎Thymeleaf</li><li>装配扩展SpringMVC</li><li>增删改查</li><li>拦截器</li><li>国际化</li></ul><p>在springboot，我们使用以下方式处理静态资源</p><ul><li>webjars    <code>localhost:8080/webjars/</code><ul><li>public，static，&#x2F;**,resource     <code>localhost:8080/</code></li></ul></li><li>优先级 resource&gt;static(默认)&gt;public</li></ul><h1 id="首页如何定制"><a href="#首页如何定制" class="headerlink" title="首页如何定制"></a>首页如何定制</h1><p>index.html</p><p>最好设置在static里</p><pre><code>在templates目录下的页面，只通过controller来跳转需要模板引擎的支持</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>自动装配原理</title>
      <link href="/2022/04/14/4-14/springboot%E4%B8%BB%E5%90%AF%E5%8A%A8%E7%B1%BB%E8%BF%90%E8%A1%8C/"/>
      <url>/2022/04/14/4-14/springboot%E4%B8%BB%E5%90%AF%E5%8A%A8%E7%B1%BB%E8%BF%90%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="主启动类运行"><a href="#主启动类运行" class="headerlink" title="主启动类运行"></a>主启动类运行</h1><ul><li>初始化 判断是不是为一个web应用</li><li>打开监听器全局处理上下文</li><li>通过主类加载，通过类加载获取spring。factories</li><li>装配环境参数</li></ul><h1 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h1><ul><li><p>可以给实体类赋值</p></li><li><pre><code class="yaml"># k = v# 注入到我们配置类中# 普通的key-valuename : xiaoliudog:  name: xiaogou  age: 3# 对象student:  name: xiaoliu  age: 3##  行内写法student1: &#123;name: xialiu, age: 3&#125;##数组pets:  - dog  - vat  -  cat  pets1: [dog,we,zw]##对象  person:  name: xiaoliu  age: 3  happy: flase  birth: 2022/10/2  map: &#123;k2: v1,k1: v2&#125;  list:    - code    - music    - book</code></pre></li></ul><pre><code class="java">@ConfigurationProperties(prefix = &quot;person&quot;)</code></pre><p>可以通过这个注解将配置文件中的值映射到组件 <code>@component</code> 上</p><p>也可以通过 <code>@PropertySource(&quot;classpath:xiaoliu.properties&quot;)</code> 注解映射到组件上</p><pre><code class="java">//加载指定的配置文件@PropertySource(&quot;classpath:xiaoliu.properties&quot;)public class Person &#123;//    SPEL表达式取值    @Value(&quot;$&#123;name&#125;&quot;)</code></pre><h1 id="松散绑定"><a href="#松散绑定" class="headerlink" title="松散绑定"></a>松散绑定</h1><p>在yml中 写的为last-name 与lastName是一样的</p><h1 id="jsr303校验"><a href="#jsr303校验" class="headerlink" title="jsr303校验"></a>jsr303校验</h1><p><strong>约束注解名称    约束注解说明</strong><br><strong>@Null    验证对象是否为空</strong><br><strong>@NotNull    验证对象是否为非空</strong><br><strong>@AssertTrue    验证 Boolean 对象是否为 true</strong><br><strong>@AssertFalse    验证 Boolean 对象是否为 false</strong><br><strong>@Min    验证 Number 和 String 对象是否大等于指定的值</strong><br><strong>@Max    验证 Number 和 String 对象是否小等于指定的值</strong><br><strong>@DecimalMin    验证 Number 和 String 对象是否大等于指定的值，小数存在精度</strong><br><strong>@DecimalMax    验证 Number 和 String 对象是否小等于指定的值，小数存在精度</strong><br><strong>@Size    验证对象（Array,Collection,Map,String）长度是否在给定的范围之内</strong><br><strong>@Digits    验证 Number 和 String 的构成是否合法</strong><br><strong>@Past    验证 Date 和 Calendar 对象是否在当前时间之前</strong><br><strong>@Future    验证 Date 和 Calendar 对象是否在当前时间之后</strong><br><strong>@Pattern    验证 String 对象是否符合正则表达式的规则</strong></p><h1 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h1><p>xxxAutoConfiguration:     默认值  xxxproperties 和配置文件绑定 我们就可以使用自定义的配置 </p><p>每一个 xxxAutoConfiguration 都是容器中的一个组件，最后都加入到容器中让他们自动配置</p><p><strong>这就是自动装配的原理!</strong><br><strong>精髓:</strong><br><strong>1)、SpringBoot启动会加载大量的自动配置类</strong><br><strong>2)、我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类当中;</strong><br><strong>3)、我们再来看这个自动配置类中到底配置了哪些组件; (只要我们要用的组件存在在其中，我们</strong><br><strong>就不需要再手动配置了)</strong><br><strong>4)、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只需要在配置</strong><br><strong>文件中指定这些属性的值即可;</strong><br><strong>xxxxAutoConfigurartion:自动配置类;给容器中添加组件</strong><br><strong>xxxxProperties:封装配置文件中相关属性文件</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>每日算法-quicksort</title>
      <link href="/2022/04/13/2022-4-13/%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95-quicksort/"/>
      <url>/2022/04/13/2022-4-13/%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95-quicksort/</url>
      
        <content type="html"><![CDATA[<p>有没有既不浪费空间又可以快一点的排序算法呢？那就是快速排啦！</p><pre><code class="java">/** * @author: 61分 * @date: 2022/4/14 0:05 * @description: */public class quickSort &#123;    public static void quickSort(int [] arr,int low,int high)&#123;        int i,j,tmp,t;        if (low&gt;high)&#123;            return;        &#125;        i = low;        j = high;        tmp = arr[low];        while (i&lt;j)&#123;            //        先看右边,从最右边递减            while (tmp&lt;=arr[j]&amp;&amp;i&lt;j)&#123;                j--;            &#125;//            再看左边，递加            while (tmp&gt;=arr[i]&amp;&amp;i&lt;j)&#123;                i++;            &#125;//            满足条件的话，交换他们的值            if (i&lt;j)&#123;                t = arr[j];                arr[j] = arr[i];                arr[i] = t;            &#125;        &#125;        arr[low] = arr[i];        arr[i] = tmp;//            之后递归调用 处理左边的        quickSort(arr,low,j-1);//            处理右边的        quickSort(arr,j+1,high);    &#125;    public static void main(String[] args) &#123;        int [] num= &#123;10,54,21,42,78,65,48&#125;;        quickSort(num,0,num.length-1);        for (int i = 0; i &lt; num.length; i++) &#123;            System.out.println(num[i]);        &#125;    &#125;&#125;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spirngboot初学</title>
      <link href="/2022/04/13/2022-4-13/springboot/"/>
      <url>/2022/04/13/2022-4-13/springboot/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot原理"><a href="#SpringBoot原理" class="headerlink" title="SpringBoot原理"></a>SpringBoot原理</h1><h2 id="1、自动装配原理"><a href="#1、自动装配原理" class="headerlink" title="1、自动装配原理"></a>1、自动装配原理</h2><p><strong>pom.xml</strong></p><ul><li>spring-boot-dependencies:核心依赖在父工程中</li><li>我们在引入一些spring依赖的时候，不需要指定版本，因为有这些版本仓库</li></ul><p><strong>启动器</strong></p><ul><li><pre><code class="xml">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre></li><li><p>是springboot的启动场景</p><ul><li>比如springbootwb 就帮我们自动导入web环境所需的所有依赖！</li></ul></li><li><p>将所有的功能场景变成一个个启动器</p></li></ul><p><strong>springboot主程序</strong> </p><pre><code class="java">@SpringBootApplicationpublic class HelloWorldApplication &#123;    public static void main(String[] args) &#123;        SpringApplication.run(HelloWorldApplication.class, args);    &#125;&#125;</code></pre><p><strong>注解</strong></p><pre><code class="java">@SpringBootConfiguration@SpringBootConfiguration</code></pre><p>自动配置的核心文件</p><p><code>WEB-INF/spring.factories</code> </p><p>所有的资源加载到配置类中</p><pre><code class="java">Properties properties = PropertiesLoaderUtils.loadProperties(resource)</code></pre><p>核心注解</p><pre><code class="java">@ConditionalOnXXX    在满足所有条件才会生效 </code></pre><p>springboot自动配置都在启动的时候扫描并加载 <code>spirng.properties</code> 所有的自动配置类都在这个配置文件中，通过判断核心注解是否满足条件才能生效</p><ul><li>springboot在启动的时候，通过类路径下的 <code>WEB-INF/spirng.properties</code> 获得指定的值</li><li>将这些自动配置的类导入容器，自动配置就会生效</li><li>即完成自动配置<ul><li>整合javaEE 解决方案和自动配置的东西都在 <code>spring-boot-test-autoconfigure-2.3.7.RELEASE.jar</code> 中</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-03</title>
      <link href="/2022/04/13/2022-4-13/Mybatis-03/"/>
      <url>/2022/04/13/2022-4-13/Mybatis-03/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis-03"><a href="#Mybatis-03" class="headerlink" title="Mybatis-03"></a>Mybatis-03</h1><h2 id="设置（settings）"><a href="#设置（settings）" class="headerlink" title="设置（settings）"></a>设置（settings）</h2><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 下表描述了设置中各项设置的含义、默认值等。</p><table><thead><tr><th align="left">设置名</th><th align="left">描述</th><th align="left">有效值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">cacheEnabled</td><td align="left">全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td><td align="left">true | false</td><td align="left">true</td></tr><tr><td align="left">lazyLoadingEnabled</td><td align="left">延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态。</td><td align="left">true | false</td><td align="left">false</td></tr><tr><td align="left">aggressiveLazyLoading</td><td align="left">开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载（参考 <code>lazyLoadTriggerMethods</code>)。</td><td align="left">true | false</td><td align="left">false （在 3.4.1 及之前的版本中默认为 true）</td></tr><tr><td align="left">multipleResultSetsEnabled</td><td align="left">是否允许单个语句返回多结果集（需要数据库驱动支持）。</td><td align="left">true | false</td><td align="left">true</td></tr><tr><td align="left">useColumnLabel</td><td align="left">使用列标签代替列名。实际表现依赖于数据库驱动，具体可参考数据库驱动的相关文档，或通过对比测试来观察。</td><td align="left">true | false</td><td align="left">true</td></tr><tr><td align="left">useGeneratedKeys</td><td align="left">允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。</td><td align="left">true | false</td><td align="left">False</td></tr><tr><td align="left">autoMappingBehavior</td><td align="left">指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。 FULL 会自动映射任何复杂的结果集（无论是否嵌套）。</td><td align="left">NONE, PARTIAL, FULL</td><td align="left">PARTIAL</td></tr><tr><td align="left">autoMappingUnknownColumnBehavior</td><td align="left">指定发现自动映射目标未知列（或未知属性类型）的行为。<code>NONE</code>: 不做任何反应<code>WARNING</code>: 输出警告日志（<code>&#39;org.apache.ibatis.session.AutoMappingUnknownColumnBehavior&#39;</code> 的日志等级必须设置为 <code>WARN</code>）<code>FAILING</code>: 映射失败 (抛出 <code>SqlSessionException</code>)</td><td align="left">NONE, WARNING, FAILING</td><td align="left">NONE</td></tr><tr><td align="left">defaultExecutorType</td><td align="left">配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（PreparedStatement）； BATCH 执行器不仅重用语句还会执行批量更新。</td><td align="left">SIMPLE REUSE BATCH</td><td align="left">SIMPLE</td></tr><tr><td align="left">defaultStatementTimeout</td><td align="left">设置超时时间，它决定数据库驱动等待数据库响应的秒数。</td><td align="left">任意正整数</td><td align="left">未设置 (null)</td></tr><tr><td align="left">defaultFetchSize</td><td align="left">为驱动的结果集获取数量（fetchSize）设置一个建议值。此参数只可以在查询设置中被覆盖。</td><td align="left">任意正整数</td><td align="left">未设置 (null)</td></tr><tr><td align="left">defaultResultSetType</td><td align="left">指定语句默认的滚动策略。（新增于 3.5.2）</td><td align="left">FORWARD_ONLY | SCROLL_SENSITIVE | SCROLL_INSENSITIVE | DEFAULT（等同于未设置）</td><td align="left">未设置 (null)</td></tr><tr><td align="left">safeRowBoundsEnabled</td><td align="left">是否允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。</td><td align="left">true | false</td><td align="left">False</td></tr><tr><td align="left">safeResultHandlerEnabled</td><td align="left">是否允许在嵌套语句中使用结果处理器（ResultHandler）。如果允许使用则设置为 false。</td><td align="left">true | false</td><td align="left">True</td></tr><tr><td align="left">mapUnderscoreToCamelCase</td><td align="left">是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。</td><td align="left">true | false</td><td align="left">False</td></tr><tr><td align="left">localCacheScope</td><td align="left">MyBatis 利用本地缓存机制（Local Cache）防止循环引用和加速重复的嵌套查询。 默认值为 SESSION，会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地缓存将仅用于执行语句，对相同 SqlSession 的不同查询将不会进行缓存。</td><td align="left">SESSION | STATEMENT</td><td align="left">SESSION</td></tr><tr><td align="left">jdbcTypeForNull</td><td align="left">当没有为参数指定特定的 JDBC 类型时，空值的默认 JDBC 类型。 某些数据库驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。</td><td align="left">JdbcType 常量，常用值：NULL、VARCHAR 或 OTHER。</td><td align="left">OTHER</td></tr><tr><td align="left">lazyLoadTriggerMethods</td><td align="left">指定对象的哪些方法触发一次延迟加载。</td><td align="left">用逗号分隔的方法列表。</td><td align="left">equals,clone,hashCode,toString</td></tr><tr><td align="left">defaultScriptingLanguage</td><td align="left">指定动态 SQL 生成使用的默认脚本语言。</td><td align="left">一个类型别名或全限定类名。</td><td align="left">org.apache.ibatis.scripting.xmltags.XMLLanguageDriver</td></tr><tr><td align="left">defaultEnumTypeHandler</td><td align="left">指定 Enum 使用的默认 <code>TypeHandler</code> 。（新增于 3.4.5）</td><td align="left">一个类型别名或全限定类名。</td><td align="left">org.apache.ibatis.type.EnumTypeHandler</td></tr><tr><td align="left">callSettersOnNulls</td><td align="left">指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet() 或 null 值进行初始化时比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。</td><td align="left">true | false</td><td align="left">false</td></tr><tr><td align="left">returnInstanceForEmptyRow</td><td align="left">当返回行的所有列都是空时，MyBatis默认返回 <code>null</code>。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集（如集合或关联）。（新增于 3.4.2）</td><td align="left">true | false</td><td align="left">false</td></tr><tr><td align="left">logPrefix</td><td align="left">指定 MyBatis 增加到日志名称的前缀。</td><td align="left">任何字符串</td><td align="left">未设置</td></tr><tr><td align="left">logImpl</td><td align="left">指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td><td align="left">SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</td><td align="left">未设置</td></tr><tr><td align="left">proxyFactory</td><td align="left">指定 Mybatis 创建可延迟加载对象所用到的代理工具。</td><td align="left">CGLIB | JAVASSIST</td><td align="left">JAVASSIST （MyBatis 3.3 以上）</td></tr><tr><td align="left">vfsImpl</td><td align="left">指定 VFS 的实现</td><td align="left">自定义 VFS 的实现的类全限定名，以逗号分隔。</td><td align="left">未设置</td></tr><tr><td align="left">useActualParamName</td><td align="left">允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 <code>-parameters</code> 选项。（新增于 3.4.1）</td><td align="left">true | false</td><td align="left">true</td></tr><tr><td align="left">configurationFactory</td><td align="left">指定一个提供 <code>Configuration</code> 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。 这个类必须包含一个签名为<code>static Configuration getConfiguration()</code> 的方法。（新增于 3.2.3）</td><td align="left">一个类型别名或完全限定类名。</td><td align="left">未设置</td></tr></tbody></table><p>一个配置完整的 settings 元素的示例如下：</p><pre><code>&lt;settings&gt;  &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;  &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;  &lt;setting name=&quot;multipleResultSetsEnabled&quot; value=&quot;true&quot;/&gt;  &lt;setting name=&quot;useColumnLabel&quot; value=&quot;true&quot;/&gt;  &lt;setting name=&quot;useGeneratedKeys&quot; value=&quot;false&quot;/&gt;  &lt;setting name=&quot;autoMappingBehavior&quot; value=&quot;PARTIAL&quot;/&gt;  &lt;setting name=&quot;autoMappingUnknownColumnBehavior&quot; value=&quot;WARNING&quot;/&gt;  &lt;setting name=&quot;defaultExecutorType&quot; value=&quot;SIMPLE&quot;/&gt;  &lt;setting name=&quot;defaultStatementTimeout&quot; value=&quot;25&quot;/&gt;  &lt;setting name=&quot;defaultFetchSize&quot; value=&quot;100&quot;/&gt;  &lt;setting name=&quot;safeRowBoundsEnabled&quot; value=&quot;false&quot;/&gt;  &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;false&quot;/&gt;  &lt;setting name=&quot;localCacheScope&quot; value=&quot;SESSION&quot;/&gt;  &lt;setting name=&quot;jdbcTypeForNull&quot; value=&quot;OTHER&quot;/&gt;  &lt;setting name=&quot;lazyLoadTriggerMethods&quot; value=&quot;equals,clone,hashCode,toString&quot;/&gt;&lt;/settings&gt;</code></pre><pre><code class="xml">&lt;settings&gt;    &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot;/&gt;&lt;/settings&gt;</code></pre><h3 id="STDOUT-LOGGING标准日志输出："><a href="#STDOUT-LOGGING标准日志输出：" class="headerlink" title="STDOUT_LOGGING标准日志输出："></a>STDOUT_LOGGING标准日志输出：</h3><p>Logging initialized using ‘class org.apache.ibatis.logging.stdout.StdOutImpl’ adapter.<br>PooledDataSource forcefully closed&#x2F;removed all connections.<br>PooledDataSource forcefully closed&#x2F;removed all connections.<br>PooledDataSource forcefully closed&#x2F;removed all connections.<br>PooledDataSource forcefully closed&#x2F;removed all connections.<br>Opening JDBC Connection<br>Created connection 775386112.<br>Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@2e377400]<br>&#x3D;&#x3D;&gt;  Preparing: select id,name,password from mybatis.user where id &#x3D; ?<br>&#x3D;&#x3D;&gt; Parameters: 2(Integer)<br>&lt;&#x3D;&#x3D;    Columns: id, name, password<br>&lt;&#x3D;&#x3D;        Row: 2, 大刘哥, 1234<br>&lt;&#x3D;&#x3D;      Total: 1<br>User{id&#x3D;2, name&#x3D;’大刘哥’, pwd&#x3D;’1234’}<br>Resetting autocommit to true on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@2e377400]<br>Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@2e377400]<br>Returned connection 775386112 to pool.</p><p>Process finished with exit code 0</p><h2 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h2><ul><li>控制日志信息输送的目的地是<a href="https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%8F%B0/2438626">控制台</a>、文件、<a href="https://baike.baidu.com/item/GUI">GUI</a>组件，甚至是套接口服务器、<a href="https://baike.baidu.com/item/NT/3443842">NT</a>的事件记录器、<a href="https://baike.baidu.com/item/UNIX">UNIX</a> <a href="https://baike.baidu.com/item/Syslog">Syslog</a><a href="https://baike.baidu.com/item/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/966835">守护进程</a>等；</li><li>我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。</li><li>最令人感兴趣的就是，这些可以通过一个<a href="https://baike.baidu.com/item/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/286550">配置文件</a>来灵活地进行配置，而不需要修改应用的代码。</li></ul><p>​    导入相关依赖</p><p>log4j.properties</p><pre><code class="properties">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码log4j.rootLogger=DEBUG,console,file#控制台输出的相关设置log4j.appender.console = org.apache.log4j.ConsoleAppenderlog4j.appender.console.Target = System.outlog4j.appender.console.Threshold=DEBUGlog4j.appender.console.layout = org.apache.log4j.PatternLayoutlog4j.appender.console.layout.ConversionPattern=[%c]-%m%n#文件输出的相关设置log4j.appender.file = org.apache.log4j.RollingFileAppenderlog4j.appender.file.File=./log/xiaoliu.loglog4j.appender.file.MaxFileSize=10mblog4j.appender.file.Threshold=DEBUGlog4j.appender.file.layout=org.apache.log4j.PatternLayoutlog4j.appender.file.layout.ConversionPattern=[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n#日志输出级别log4j.logger.org.mybatis=DEBUGlog4j.logger.java.sql=DEBUGlog4j.logger.java.sql.Statement=DEBUGlog4j.logger.java.sql.ResultSet=DEBUGlog4j.logger.java.sql.PreparedStatement=DEBUG</code></pre><p>配置文件的实现：</p><pre><code class="xml">&lt;settings&gt;        &lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot;/&gt;    &lt;/settings&gt;</code></pre><p>D:\Java\jdk1.8.0_191\bin\java.exe -ea -Didea.test.cyclic.buffer.size&#x3D;1048576 “-javaagent:D:\IntelliJ<br>?org.apache.ibatis.transaction.jdbc.JdbcTransaction?-Opening JDBC Connection<br>?org.apache.ibatis.datasource.pooled.PooledDataSource?-Created connection 1151844284.<br>?org.apache.ibatis.transaction.jdbc.JdbcTransaction?-Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@44a7bfbc]<br>?com.xiaoliu.Dao.UserMapper.getUserById?-&#x3D;&#x3D;&gt;  Preparing: select id,name,password from mybatis.user where id &#x3D; ?<br>?com.xiaoliu.Dao.UserMapper.getUserById?-&#x3D;&#x3D;&gt; Parameters: 2(Integer)<br>?com.xiaoliu.Dao.UserMapper.getUserById?-&lt;&#x3D;&#x3D;      Total: 1<br>User{id&#x3D;2, name&#x3D;’大刘哥’, pwd&#x3D;’1234’}<br>?org.apache.ibatis.transaction.jdbc.JdbcTransaction?-Resetting autocommit to true on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@44a7bfbc]<br>?org.apache.ibatis.transaction.jdbc.JdbcTransaction?-Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@44a7bfbc]<br>?org.apache.ibatis.datasource.pooled.PooledDataSource?-Returned connection 1151844284 to pool.</p><p>Process finished with exit code 0</p><p>在使用时要记得到入包</p><pre><code class="java">import org.apache.log4j.Logger;</code></pre><p>并在要使用的类下面使用当前的class</p><pre><code class="java">static Logger logger = Logger.getLogger(UserMapperTest.class);</code></pre><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>每日算法</title>
      <link href="/2022/04/13/2022-4-12/---/"/>
      <url>/2022/04/13/2022-4-12/---/</url>
      
        <content type="html"><![CDATA[<pre><code class="java">/** * @author: 61分 * @date: 2022/4/13 0:23 * @description: */public class popSort &#123;    public static void main(String[] args) &#123;        int[] nums=&#123;1,2,3,4,5,6,89,77&#125;;        int tmp = 0;        for (int i = 0; i &lt; nums.length-1; i++) &#123;            for (int j = 0; j &lt; nums.length-i-1; j++) &#123;                if (nums[j]&lt;nums[j+1])&#123;                    tmp = nums[j];                    nums[j] = nums[j+1];                    nums[j+1] = tmp;                &#125;            &#125;        &#125;        for (int k = 0; k &lt; nums.length; k++) &#123;            System.out.println(nums[k]);        &#125;    &#125;&#125;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis02</title>
      <link href="/2022/04/12/2022-4-12/%E6%8E%A5%E5%8F%A3%E5%BF%85%E9%A1%BB%E5%92%8CMapper%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%90%8C%E5%90%8D%E6%8E%A5%E5%8F%A3%E5%BF%85%E9%A1%BB%E5%92%8CMapper%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%9C%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E5%8C%85%E4%B8%8B/"/>
      <url>/2022/04/12/2022-4-12/%E6%8E%A5%E5%8F%A3%E5%BF%85%E9%A1%BB%E5%92%8CMapper%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%90%8C%E5%90%8D%E6%8E%A5%E5%8F%A3%E5%BF%85%E9%A1%BB%E5%92%8CMapper%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%9C%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E5%8C%85%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="映射器"><a href="#映射器" class="headerlink" title="映射器"></a>映射器</h2><ul><li>接口必须和Mapper配置文件同名</li><li>接口必须和Mapper配置文件在同一个包下</li></ul><h2 id="生命周期及其作用域"><a href="#生命周期及其作用域" class="headerlink" title="生命周期及其作用域"></a>生命周期及其作用域</h2><ul><li>生命周期类别是至关重要的，因为错误的使用会导致非常严重的并发问题。</li></ul><h2 id="属性名和字段名的不一致"><a href="#属性名和字段名的不一致" class="headerlink" title="属性名和字段名的不一致"></a>属性名和字段名的不一致</h2><ul><li>利用resultMap（结果集映射）</li></ul><p><strong>UserMapper.xml：</strong></p><pre><code class="java">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.xiaoliu.Dao.UserMapper&quot;&gt;&lt;!--    结果集映射--&gt;    &lt;!--    column为数据库中的字段名，property为实体类中的属性--&gt;    &lt;resultMap id=&quot;UserMap&quot; type=&quot;com.xiaoliu.pojo.User&quot;&gt;&lt;!--        &lt;result property=&quot;id&quot; column=&quot;id&quot;/&gt;--&gt;&lt;!--        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;--&gt;        &lt;result property=&quot;pwd&quot; column=&quot;password&quot;/&gt;    &lt;/resultMap&gt;    &lt;select id=&quot;getUserById&quot; resultMap=&quot;UserMap&quot;&gt;        select id,name,password from mybatis.user where id  = #&#123;id&#125;    &lt;/select&gt;&lt;/mapper&gt;</code></pre><p>测试类：</p><pre><code class="java">public class UserMapperTest &#123;    @Test    public void getUserById()&#123;        SqlSession sqlSession = MybatisUtils.getSqlSession();//        获取接口        UserMapper mapper = sqlSession.getMapper(UserMapper.class);        User user = mapper.getUserById(2);        System.out.println(user);        sqlSession.close();    &#125;&#125;</code></pre><p>结果：</p><p>User{id&#x3D;2, name&#x3D;’大刘哥’, pwd&#x3D;’1234’}</p><p>Process finished with exit code 0</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis初学</title>
      <link href="/2022/04/11/2022-4-11/Mybatis/"/>
      <url>/2022/04/11/2022-4-11/Mybatis/</url>
      
        <content type="html"><![CDATA[<h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><h2 id="1、什么是Mybatis"><a href="#1、什么是Mybatis" class="headerlink" title="1、什么是Mybatis"></a>1、什么是Mybatis</h2><p>​    MyBatis本是apache的一个<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/3406069">开源项目</a>iBatis，2010年这个<a href="https://baike.baidu.com/item/%E9%A1%B9%E7%9B%AE/477803">项目</a>由apache software foundation迁移到了[google code](<a href="https://baike.baidu.com/item/google">https://baike.baidu.com/item/google</a> code&#x2F;2346604)，并且改名为MyBatis。2013年11月迁移到<a href="https://baike.baidu.com/item/Github/10145341">Github</a>。</p><p>​    iBATIS一词来源于“internet”和“abatis”的组合，是一个基于Java的<a href="https://baike.baidu.com/item/%E6%8C%81%E4%B9%85%E5%B1%82/3584971">持久层</a>框架。iBATIS提供的持久层框架包括SQL Maps和Data Access Objects（DAOs）。</p><p>​    当前，最新版本是MyBatis 3.5.9，其发布时间是2021年12月26日。</p><h2 id="2、持久化"><a href="#2、持久化" class="headerlink" title="2、持久化"></a>2、持久化</h2><p>​    持久化是将程序数据在<a href="https://baike.baidu.com/item/%E6%8C%81%E4%B9%85/5702771">持久</a>状态和<a href="https://baike.baidu.com/item/%E7%9E%AC%E6%97%B6/3471916">瞬时</a>状态间转换的机制。通俗的讲，就是瞬时数据（比如内存中的数据，是不能永久保存的）持久化为持久数据（比如持久化至数据库中，能够长久保存）。</p><h2 id="3、持久层"><a href="#3、持久层" class="headerlink" title="3、持久层"></a>3、持久层</h2><p>​    可以理解成数据 保存在 数据库或者 硬盘一类可以保存很长时间的设备里面，不像放在内存中那样断电就消失了，也就是把数据存在持久化设备上，mybatis就是持久层。</p><p>内存：断点即失</p><h2 id="4、Maven项目下创建第一个mybatis程序"><a href="#4、Maven项目下创建第一个mybatis程序" class="headerlink" title="4、Maven项目下创建第一个mybatis程序"></a>4、Maven项目下创建第一个mybatis程序</h2><h3 id="4-1-导入依赖：mysql驱动、mybatis、lombok。"><a href="#4-1-导入依赖：mysql驱动、mybatis、lombok。" class="headerlink" title="4.1 导入依赖：mysql驱动、mybatis、lombok。"></a>4.1 导入依赖：mysql驱动、mybatis、lombok。</h3><h3 id="注意：maven资源导出问题：最好，父类，子类都添加"><a href="#注意：maven资源导出问题：最好，父类，子类都添加" class="headerlink" title="注意：maven资源导出问题：最好，父类，子类都添加"></a>注意：maven资源导出问题：最好，父类，子类都添加</h3><pre><code class="xml">&lt;build&gt;    &lt;resources&gt;        &lt;resource&gt;            &lt;directory&gt;src/main/resources&lt;/directory&gt;            &lt;includes&gt;                &lt;include&gt;**/*.properties&lt;/include&gt;                &lt;include&gt;**/*.xml&lt;/include&gt;            &lt;/includes&gt;            &lt;filtering&gt;true&lt;/filtering&gt;        &lt;/resource&gt;        &lt;resource&gt;            &lt;directory&gt;src/main/java&lt;/directory&gt;            &lt;includes&gt;                &lt;include&gt;**/*.properties&lt;/include&gt;                &lt;include&gt;**/*.xml&lt;/include&gt;            &lt;/includes&gt;            &lt;filtering&gt;true&lt;/filtering&gt;        &lt;/resource&gt;    &lt;/resources&gt;&lt;/build&gt;</code></pre><p>搭好项目结构：</p><h3 id="4-3、去mybatis中文文档-粘贴需要用到的核心配置文件"><a href="#4-3、去mybatis中文文档-粘贴需要用到的核心配置文件" class="headerlink" title="4.3、去mybatis中文文档 粘贴需要用到的核心配置文件"></a>4.3、去mybatis中文文档 粘贴需要用到的核心配置文件</h3><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;    &lt;environments default=&quot;development&quot;&gt;        &lt;environment id=&quot;development&quot;&gt;            &lt;transactionManager type=&quot;JDBC&quot;/&gt;            &lt;dataSource type=&quot;POOLED&quot;&gt;                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?userSSL=true&amp;amp;userUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimezone=UTC&quot;/&gt;                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;                &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;&lt;!--    注册Mapper--&gt;    &lt;mappers&gt;        &lt;mapper resource=&quot;com/xiaoliu/Mapper/UserMapper.xml&quot;/&gt;    &lt;/mappers&gt;&lt;/configuration&gt;</code></pre><p><strong>注意：注册mapper</strong></p><h3 id="4-4、编写实体类User"><a href="#4-4、编写实体类User" class="headerlink" title="4.4、编写实体类User"></a>4.4、编写实体类User</h3><pre><code class="java">package com.xiaoliu.pojo;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;/** * @author: 61分 * @date: 2022/4/11 17:35 * @description: */@Data@NoArgsConstructor@AllArgsConstructorpublic class User &#123;    private int id;    private String name;    private String password;&#125;</code></pre><h3 id="4-5、编写Mapper接口及实现的配置文件"><a href="#4-5、编写Mapper接口及实现的配置文件" class="headerlink" title="4.5、编写Mapper接口及实现的配置文件"></a>4.5、编写Mapper接口及实现的配置文件</h3><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;!--namespace=绑定对应的Mapper接口--&gt;&lt;mapper namespace=&quot;com.xiaoliu.Mapper.UserMapper&quot;&gt;&lt;!--    id对应的是方法名称--&gt;    &lt;select id=&quot;getUserList&quot; resultType=&quot;com.xiaoliu.pojo.User&quot;&gt;        select * from mybatis.user    &lt;/select&gt;&lt;/mapper&gt;</code></pre><p>配置文件</p><p>UserMappe接口</p><pre><code class="java">package com.xiaoliu.Mapper;import com.xiaoliu.pojo.User;import java.util.List;/** * @author: 61分 * @date: 2022/4/11 17:41 * @description: */public interface UserMapper &#123;    List&lt;User&gt; getUserList();&#125;</code></pre><p>​    </p><h3 id="4-6、编写MybatisUtil类"><a href="#4-6、编写MybatisUtil类" class="headerlink" title="4.6、编写MybatisUtil类"></a>4.6、编写MybatisUtil类</h3><p>获取SQLSession</p><p>执行SQLSession</p><pre><code class="java">package com.xiaoliu.utils;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import java.io.IOException;import java.io.InputStream;/** * @author: 61分 * @date: 2022/4/11 15:55 * @description:获取SQLSessionFactory */public class MybatisUtils &#123;    private static SqlSessionFactory sqlSessionFactory;    static &#123;        try &#123;//            获取SQLSessionFactory-》SQLSession            String resource = &quot;mybatis-config.xml&quot;;            InputStream  inputStream = Resources.getResourceAsStream(resource);            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;    //        既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。    //        SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。//        你可以通过 SqlSession 实例来直接执行已映射的 SQL 语句。    public static SqlSession getSqlSession()&#123;        return sqlSessionFactory.openSession();    &#125;&#125;</code></pre><h3 id="4-7、编写Test类进行测试"><a href="#4-7、编写Test类进行测试" class="headerlink" title="4.7、编写Test类进行测试"></a>4.7、编写Test类进行测试</h3><pre><code class="java">package com.xiaoliu.Mapper;import com.xiaoliu.pojo.User;import com.xiaoliu.utils.MybatisUtils;import org.apache.ibatis.session.SqlSession;import org.junit.Test;import java.util.List;/** * @author: 61分 * @date: 2022/4/11 18:00 * @description: */public class UserMapperTest &#123;    @Test    public void test()&#123;//        第一步：获得sqlSession对象        SqlSession sqlSession = MybatisUtils.getSqlSession();        System.out.println(&quot;getsqlSession&quot;);//        第二步，方式一：getMapper        UserMapper mapper = sqlSession.getMapper(UserMapper.class);        List&lt;User&gt; userList = mapper.getUserList();        System.out.println(&quot;getMapper&quot;);        for (User user : userList) &#123;            System.out.println(user);        &#125;//        关闭sqlSession        System.out.println(&quot;close&quot;);        sqlSession.close();    &#125;&#125;</code></pre><p><strong>测试成功：</strong></p><h2 id="5、学习总结"><a href="#5、学习总结" class="headerlink" title="5、学习总结"></a>5、学习总结</h2><p>​    <strong>注意注册Mapper，及maven资源导出的问题</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>这是个测试块</title>
      <link href="/2022/03/22/we/"/>
      <url>/2022/03/22/we/</url>
      
        <content type="html"><![CDATA[<h2 id="这是个测试块"><a href="#这是个测试块" class="headerlink" title="这是个测试块"></a>这是个测试块</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>欢迎来到小刘的博客</title>
      <link href="/2022/03/21/hello-world/"/>
      <url>/2022/03/21/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="暂时不知道写点啥"><a href="#暂时不知道写点啥" class="headerlink" title="暂时不知道写点啥"></a>暂时不知道写点啥</h2><div class="story post-story"></div>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
