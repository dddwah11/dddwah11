<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/04/13/2022-4-12/---/"/>
      <url>/2022/04/13/2022-4-12/---/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="title-每日算法"><a href="#title-每日算法" class="headerlink" title="title:每日算法"></a>title:每日算法</h2><pre><code class="java">/** * @author: 61分 * @date: 2022/4/13 0:23 * @description: */public class popSort &#123;    public static void main(String[] args) &#123;        int[] nums=&#123;1,2,3,4,5,6,89,77&#125;;        int tmp = 0;        for (int i = 0; i &lt; nums.length-1; i++) &#123;            for (int j = 0; j &lt; nums.length-i-1; j++) &#123;                if (nums[j]&lt;nums[j+1])&#123;                    tmp = nums[j];                    nums[j] = nums[j+1];                    nums[j+1] = tmp;                &#125;            &#125;        &#125;        for (int k = 0; k &lt; nums.length; k++) &#123;            System.out.println(nums[k]);        &#125;    &#125;&#125;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis02</title>
      <link href="/2022/04/12/2022-4-12/%E6%8E%A5%E5%8F%A3%E5%BF%85%E9%A1%BB%E5%92%8CMapper%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%90%8C%E5%90%8D%E6%8E%A5%E5%8F%A3%E5%BF%85%E9%A1%BB%E5%92%8CMapper%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%9C%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E5%8C%85%E4%B8%8B/"/>
      <url>/2022/04/12/2022-4-12/%E6%8E%A5%E5%8F%A3%E5%BF%85%E9%A1%BB%E5%92%8CMapper%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%90%8C%E5%90%8D%E6%8E%A5%E5%8F%A3%E5%BF%85%E9%A1%BB%E5%92%8CMapper%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%9C%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E5%8C%85%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="映射器"><a href="#映射器" class="headerlink" title="映射器"></a>映射器</h2><ul><li>接口必须和Mapper配置文件同名</li><li>接口必须和Mapper配置文件在同一个包下</li></ul><h2 id="生命周期及其作用域"><a href="#生命周期及其作用域" class="headerlink" title="生命周期及其作用域"></a>生命周期及其作用域</h2><ul><li>生命周期类别是至关重要的，因为错误的使用会导致非常严重的并发问题。</li></ul><h2 id="属性名和字段名的不一致"><a href="#属性名和字段名的不一致" class="headerlink" title="属性名和字段名的不一致"></a>属性名和字段名的不一致</h2><ul><li>利用resultMap（结果集映射）</li></ul><p><strong>UserMapper.xml：</strong></p><pre><code class="java">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.xiaoliu.Dao.UserMapper&quot;&gt;&lt;!--    结果集映射--&gt;    &lt;!--    column为数据库中的字段名，property为实体类中的属性--&gt;    &lt;resultMap id=&quot;UserMap&quot; type=&quot;com.xiaoliu.pojo.User&quot;&gt;&lt;!--        &lt;result property=&quot;id&quot; column=&quot;id&quot;/&gt;--&gt;&lt;!--        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;--&gt;        &lt;result property=&quot;pwd&quot; column=&quot;password&quot;/&gt;    &lt;/resultMap&gt;    &lt;select id=&quot;getUserById&quot; resultMap=&quot;UserMap&quot;&gt;        select id,name,password from mybatis.user where id  = #&#123;id&#125;    &lt;/select&gt;&lt;/mapper&gt;</code></pre><p>测试类：</p><pre><code class="java">public class UserMapperTest &#123;    @Test    public void getUserById()&#123;        SqlSession sqlSession = MybatisUtils.getSqlSession();//        获取接口        UserMapper mapper = sqlSession.getMapper(UserMapper.class);        User user = mapper.getUserById(2);        System.out.println(user);        sqlSession.close();    &#125;&#125;</code></pre><p>结果：</p><p>User{id&#x3D;2, name&#x3D;’大刘哥’, pwd&#x3D;’1234’}</p><p>Process finished with exit code 0<img src="/.io//"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis初学</title>
      <link href="/2022/04/11/2022-4-11/Mybatis/"/>
      <url>/2022/04/11/2022-4-11/Mybatis/</url>
      
        <content type="html"><![CDATA[<h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><h2 id="1、什么是Mybatis"><a href="#1、什么是Mybatis" class="headerlink" title="1、什么是Mybatis"></a>1、什么是Mybatis</h2><p>​    MyBatis本是apache的一个<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/3406069">开源项目</a>iBatis，2010年这个<a href="https://baike.baidu.com/item/%E9%A1%B9%E7%9B%AE/477803">项目</a>由apache software foundation迁移到了[google code](<a href="https://baike.baidu.com/item/google">https://baike.baidu.com/item/google</a> code&#x2F;2346604)，并且改名为MyBatis。2013年11月迁移到<a href="https://baike.baidu.com/item/Github/10145341">Github</a>。</p><p>​    iBATIS一词来源于“internet”和“abatis”的组合，是一个基于Java的<a href="https://baike.baidu.com/item/%E6%8C%81%E4%B9%85%E5%B1%82/3584971">持久层</a>框架。iBATIS提供的持久层框架包括SQL Maps和Data Access Objects（DAOs）。</p><p>​    当前，最新版本是MyBatis 3.5.9，其发布时间是2021年12月26日。</p><h2 id="2、持久化"><a href="#2、持久化" class="headerlink" title="2、持久化"></a>2、持久化</h2><p>​    持久化是将程序数据在<a href="https://baike.baidu.com/item/%E6%8C%81%E4%B9%85/5702771">持久</a>状态和<a href="https://baike.baidu.com/item/%E7%9E%AC%E6%97%B6/3471916">瞬时</a>状态间转换的机制。通俗的讲，就是瞬时数据（比如内存中的数据，是不能永久保存的）持久化为持久数据（比如持久化至数据库中，能够长久保存）。</p><h2 id="3、持久层"><a href="#3、持久层" class="headerlink" title="3、持久层"></a>3、持久层</h2><p>​    可以理解成数据 保存在 数据库或者 硬盘一类可以保存很长时间的设备里面，不像放在内存中那样断电就消失了，也就是把数据存在持久化设备上，mybatis就是持久层。</p><p>内存：断点即失</p><h2 id="4、Maven项目下创建第一个mybatis程序"><a href="#4、Maven项目下创建第一个mybatis程序" class="headerlink" title="4、Maven项目下创建第一个mybatis程序"></a>4、Maven项目下创建第一个mybatis程序</h2><h3 id="4-1-导入依赖：mysql驱动、mybatis、lombok。"><a href="#4-1-导入依赖：mysql驱动、mybatis、lombok。" class="headerlink" title="4.1 导入依赖：mysql驱动、mybatis、lombok。"></a>4.1 导入依赖：mysql驱动、mybatis、lombok。</h3><h3 id="注意：maven资源导出问题：最好，父类，子类都添加"><a href="#注意：maven资源导出问题：最好，父类，子类都添加" class="headerlink" title="注意：maven资源导出问题：最好，父类，子类都添加"></a>注意：maven资源导出问题：最好，父类，子类都添加</h3><pre><code class="xml">&lt;build&gt;    &lt;resources&gt;        &lt;resource&gt;            &lt;directory&gt;src/main/resources&lt;/directory&gt;            &lt;includes&gt;                &lt;include&gt;**/*.properties&lt;/include&gt;                &lt;include&gt;**/*.xml&lt;/include&gt;            &lt;/includes&gt;            &lt;filtering&gt;true&lt;/filtering&gt;        &lt;/resource&gt;        &lt;resource&gt;            &lt;directory&gt;src/main/java&lt;/directory&gt;            &lt;includes&gt;                &lt;include&gt;**/*.properties&lt;/include&gt;                &lt;include&gt;**/*.xml&lt;/include&gt;            &lt;/includes&gt;            &lt;filtering&gt;true&lt;/filtering&gt;        &lt;/resource&gt;    &lt;/resources&gt;&lt;/build&gt;</code></pre><p>搭好项目结构：</p><h3 id="4-3、去mybatis中文文档-粘贴需要用到的核心配置文件"><a href="#4-3、去mybatis中文文档-粘贴需要用到的核心配置文件" class="headerlink" title="4.3、去mybatis中文文档 粘贴需要用到的核心配置文件"></a>4.3、去mybatis中文文档 粘贴需要用到的核心配置文件</h3><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;    &lt;environments default=&quot;development&quot;&gt;        &lt;environment id=&quot;development&quot;&gt;            &lt;transactionManager type=&quot;JDBC&quot;/&gt;            &lt;dataSource type=&quot;POOLED&quot;&gt;                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?userSSL=true&amp;amp;userUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimezone=UTC&quot;/&gt;                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;                &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;&lt;!--    注册Mapper--&gt;    &lt;mappers&gt;        &lt;mapper resource=&quot;com/xiaoliu/Mapper/UserMapper.xml&quot;/&gt;    &lt;/mappers&gt;&lt;/configuration&gt;</code></pre><p><strong>注意：注册mapper</strong></p><h3 id="4-4、编写实体类User"><a href="#4-4、编写实体类User" class="headerlink" title="4.4、编写实体类User"></a>4.4、编写实体类User</h3><pre><code class="java">package com.xiaoliu.pojo;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;/** * @author: 61分 * @date: 2022/4/11 17:35 * @description: */@Data@NoArgsConstructor@AllArgsConstructorpublic class User &#123;    private int id;    private String name;    private String password;&#125;</code></pre><h3 id="4-5、编写Mapper接口及实现的配置文件"><a href="#4-5、编写Mapper接口及实现的配置文件" class="headerlink" title="4.5、编写Mapper接口及实现的配置文件"></a>4.5、编写Mapper接口及实现的配置文件</h3><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;!--namespace=绑定对应的Mapper接口--&gt;&lt;mapper namespace=&quot;com.xiaoliu.Mapper.UserMapper&quot;&gt;&lt;!--    id对应的是方法名称--&gt;    &lt;select id=&quot;getUserList&quot; resultType=&quot;com.xiaoliu.pojo.User&quot;&gt;        select * from mybatis.user    &lt;/select&gt;&lt;/mapper&gt;</code></pre><p>配置文件</p><p>UserMappe接口</p><pre><code class="java">package com.xiaoliu.Mapper;import com.xiaoliu.pojo.User;import java.util.List;/** * @author: 61分 * @date: 2022/4/11 17:41 * @description: */public interface UserMapper &#123;    List&lt;User&gt; getUserList();&#125;</code></pre><p>​    </p><h3 id="4-6、编写MybatisUtil类"><a href="#4-6、编写MybatisUtil类" class="headerlink" title="4.6、编写MybatisUtil类"></a>4.6、编写MybatisUtil类</h3><p>获取SQLSession</p><p>执行SQLSession</p><pre><code class="java">package com.xiaoliu.utils;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import java.io.IOException;import java.io.InputStream;/** * @author: 61分 * @date: 2022/4/11 15:55 * @description:获取SQLSessionFactory */public class MybatisUtils &#123;    private static SqlSessionFactory sqlSessionFactory;    static &#123;        try &#123;//            获取SQLSessionFactory-》SQLSession            String resource = &quot;mybatis-config.xml&quot;;            InputStream  inputStream = Resources.getResourceAsStream(resource);            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;    //        既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。    //        SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。//        你可以通过 SqlSession 实例来直接执行已映射的 SQL 语句。    public static SqlSession getSqlSession()&#123;        return sqlSessionFactory.openSession();    &#125;&#125;</code></pre><h3 id="4-7、编写Test类进行测试"><a href="#4-7、编写Test类进行测试" class="headerlink" title="4.7、编写Test类进行测试"></a>4.7、编写Test类进行测试</h3><pre><code class="java">package com.xiaoliu.Mapper;import com.xiaoliu.pojo.User;import com.xiaoliu.utils.MybatisUtils;import org.apache.ibatis.session.SqlSession;import org.junit.Test;import java.util.List;/** * @author: 61分 * @date: 2022/4/11 18:00 * @description: */public class UserMapperTest &#123;    @Test    public void test()&#123;//        第一步：获得sqlSession对象        SqlSession sqlSession = MybatisUtils.getSqlSession();        System.out.println(&quot;getsqlSession&quot;);//        第二步，方式一：getMapper        UserMapper mapper = sqlSession.getMapper(UserMapper.class);        List&lt;User&gt; userList = mapper.getUserList();        System.out.println(&quot;getMapper&quot;);        for (User user : userList) &#123;            System.out.println(user);        &#125;//        关闭sqlSession        System.out.println(&quot;close&quot;);        sqlSession.close();    &#125;&#125;</code></pre><p><strong>测试成功：</strong></p><h2 id="5、学习总结"><a href="#5、学习总结" class="headerlink" title="5、学习总结"></a>5、学习总结</h2><p>​    <strong>注意注册Mapper，及maven资源导出的问题</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>这是个测试块</title>
      <link href="/2022/03/22/we/"/>
      <url>/2022/03/22/we/</url>
      
        <content type="html"><![CDATA[<h2 id="这是个测试块"><a href="#这是个测试块" class="headerlink" title="这是个测试块"></a>这是个测试块</h2><div class="story post-story"></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>欢迎来到小刘的博客</title>
      <link href="/2022/03/21/hello-world/"/>
      <url>/2022/03/21/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="暂时不知道写点啥"><a href="#暂时不知道写点啥" class="headerlink" title="暂时不知道写点啥"></a>暂时不知道写点啥</h2><div class="story post-story"></div>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
