{"meta":{"title":"61分","subtitle":"","description":"","author":"小刘","url":"https://dddwah11.github.io","root":"/"},"pages":[],"posts":[{"title":"","slug":"2022-4-12/---","date":"2022-04-12T16:33:51.713Z","updated":"2022-04-12T16:33:53.303Z","comments":true,"path":"2022/04/13/2022-4-12/---/","link":"","permalink":"https://dddwah11.github.io/2022/04/13/2022-4-12/---/","excerpt":"","text":"title:每日算法/** * @author: 61分 * @date: 2022/4/13 0:23 * @description: */ public class popSort &#123; public static void main(String[] args) &#123; int[] nums=&#123;1,2,3,4,5,6,89,77&#125;; int tmp = 0; for (int i = 0; i &lt; nums.length-1; i++) &#123; for (int j = 0; j &lt; nums.length-i-1; j++) &#123; if (nums[j]&lt;nums[j+1])&#123; tmp = nums[j]; nums[j] = nums[j+1]; nums[j+1] = tmp; &#125; &#125; &#125; for (int k = 0; k &lt; nums.length; k++) &#123; System.out.println(nums[k]); &#125; &#125; &#125;","categories":[],"tags":[]},{"title":"Mybatis02","slug":"2022-4-12/接口必须和Mapper配置文件同名接口必须和Mapper配置文件在同一个包下","date":"2022-04-12T12:09:05.748Z","updated":"2022-04-12T16:16:50.565Z","comments":true,"path":"2022/04/12/2022-4-12/接口必须和Mapper配置文件同名接口必须和Mapper配置文件在同一个包下/","link":"","permalink":"https://dddwah11.github.io/2022/04/12/2022-4-12/%E6%8E%A5%E5%8F%A3%E5%BF%85%E9%A1%BB%E5%92%8CMapper%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%90%8C%E5%90%8D%E6%8E%A5%E5%8F%A3%E5%BF%85%E9%A1%BB%E5%92%8CMapper%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%9C%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E5%8C%85%E4%B8%8B/","excerpt":"","text":"映射器 接口必须和Mapper配置文件同名 接口必须和Mapper配置文件在同一个包下 生命周期及其作用域 生命周期类别是至关重要的，因为错误的使用会导致非常严重的并发问题。 属性名和字段名的不一致 利用resultMap（结果集映射） UserMapper.xml： &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.xiaoliu.Dao.UserMapper&quot;&gt; &lt;!-- 结果集映射--&gt; &lt;!-- column为数据库中的字段名，property为实体类中的属性--&gt; &lt;resultMap id=&quot;UserMap&quot; type=&quot;com.xiaoliu.pojo.User&quot;&gt; &lt;!-- &lt;result property=&quot;id&quot; column=&quot;id&quot;/&gt;--&gt; &lt;!-- &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;--&gt; &lt;result property=&quot;pwd&quot; column=&quot;password&quot;/&gt; &lt;/resultMap&gt; &lt;select id=&quot;getUserById&quot; resultMap=&quot;UserMap&quot;&gt; select id,name,password from mybatis.user where id = #&#123;id&#125; &lt;/select&gt; &lt;/mapper&gt; 测试类： public class UserMapperTest &#123; @Test public void getUserById()&#123; SqlSession sqlSession = MybatisUtils.getSqlSession(); // 获取接口 UserMapper mapper = sqlSession.getMapper(UserMapper.class); User user = mapper.getUserById(2); System.out.println(user); sqlSession.close(); &#125; &#125; 结果： User{id&#x3D;2, name&#x3D;’大刘哥’, pwd&#x3D;’1234’} Process finished with exit code 0","categories":[],"tags":[]},{"title":"Mybatis初学","slug":"2022-4-11/Mybatis","date":"2022-04-11T14:31:27.955Z","updated":"2022-04-12T06:43:05.888Z","comments":true,"path":"2022/04/11/2022-4-11/Mybatis/","link":"","permalink":"https://dddwah11.github.io/2022/04/11/2022-4-11/Mybatis/","excerpt":"","text":"Mybatis1、什么是Mybatis​ MyBatis本是apache的一个开源项目iBatis，2010年这个项目由apache software foundation迁移到了[google code](https://baike.baidu.com/item/google code&#x2F;2346604)，并且改名为MyBatis。2013年11月迁移到Github。 ​ iBATIS一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。iBATIS提供的持久层框架包括SQL Maps和Data Access Objects（DAOs）。 ​ 当前，最新版本是MyBatis 3.5.9，其发布时间是2021年12月26日。 2、持久化​ 持久化是将程序数据在持久状态和瞬时状态间转换的机制。通俗的讲，就是瞬时数据（比如内存中的数据，是不能永久保存的）持久化为持久数据（比如持久化至数据库中，能够长久保存）。 3、持久层​ 可以理解成数据 保存在 数据库或者 硬盘一类可以保存很长时间的设备里面，不像放在内存中那样断电就消失了，也就是把数据存在持久化设备上，mybatis就是持久层。 内存：断点即失 4、Maven项目下创建第一个mybatis程序4.1 导入依赖：mysql驱动、mybatis、lombok。注意：maven资源导出问题：最好，父类，子类都添加&lt;build&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;true&lt;/filtering&gt; &lt;/resource&gt; &lt;resource&gt; &lt;directory&gt;src/main/java&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;true&lt;/filtering&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/build&gt; 搭好项目结构： 4.3、去mybatis中文文档 粘贴需要用到的核心配置文件&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt; &lt;configuration&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?userSSL=true&amp;amp;userUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimezone=UTC&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;!-- 注册Mapper--&gt; &lt;mappers&gt; &lt;mapper resource=&quot;com/xiaoliu/Mapper/UserMapper.xml&quot;/&gt; &lt;/mappers&gt; &lt;/configuration&gt; 注意：注册mapper 4.4、编写实体类Userpackage com.xiaoliu.pojo; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; /** * @author: 61分 * @date: 2022/4/11 17:35 * @description: */ @Data @NoArgsConstructor @AllArgsConstructor public class User &#123; private int id; private String name; private String password; &#125; 4.5、编写Mapper接口及实现的配置文件&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;!--namespace=绑定对应的Mapper接口--&gt; &lt;mapper namespace=&quot;com.xiaoliu.Mapper.UserMapper&quot;&gt; &lt;!-- id对应的是方法名称--&gt; &lt;select id=&quot;getUserList&quot; resultType=&quot;com.xiaoliu.pojo.User&quot;&gt; select * from mybatis.user &lt;/select&gt; &lt;/mapper&gt; 配置文件 UserMappe接口 package com.xiaoliu.Mapper; import com.xiaoliu.pojo.User; import java.util.List; /** * @author: 61分 * @date: 2022/4/11 17:41 * @description: */ public interface UserMapper &#123; List&lt;User&gt; getUserList(); &#125; ​ 4.6、编写MybatisUtil类获取SQLSession 执行SQLSession package com.xiaoliu.utils; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import java.io.IOException; import java.io.InputStream; /** * @author: 61分 * @date: 2022/4/11 15:55 * @description:获取SQLSessionFactory */ public class MybatisUtils &#123; private static SqlSessionFactory sqlSessionFactory; static &#123; try &#123; // 获取SQLSessionFactory-》SQLSession String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; // 既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。 // SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。 // 你可以通过 SqlSession 实例来直接执行已映射的 SQL 语句。 public static SqlSession getSqlSession()&#123; return sqlSessionFactory.openSession(); &#125; &#125; 4.7、编写Test类进行测试package com.xiaoliu.Mapper; import com.xiaoliu.pojo.User; import com.xiaoliu.utils.MybatisUtils; import org.apache.ibatis.session.SqlSession; import org.junit.Test; import java.util.List; /** * @author: 61分 * @date: 2022/4/11 18:00 * @description: */ public class UserMapperTest &#123; @Test public void test()&#123; // 第一步：获得sqlSession对象 SqlSession sqlSession = MybatisUtils.getSqlSession(); System.out.println(&quot;getsqlSession&quot;); // 第二步，方式一：getMapper UserMapper mapper = sqlSession.getMapper(UserMapper.class); List&lt;User&gt; userList = mapper.getUserList(); System.out.println(&quot;getMapper&quot;); for (User user : userList) &#123; System.out.println(user); &#125; // 关闭sqlSession System.out.println(&quot;close&quot;); sqlSession.close(); &#125; &#125; 测试成功： 5、学习总结​ 注意注册Mapper，及maven资源导出的问题","categories":[],"tags":[]},{"title":"这是个测试块","slug":"we","date":"2022-03-22T12:51:06.905Z","updated":"2022-03-22T12:58:30.267Z","comments":true,"path":"2022/03/22/we/","link":"","permalink":"https://dddwah11.github.io/2022/03/22/we/","excerpt":"","text":"这是个测试块","categories":[],"tags":[]},{"title":"欢迎来到小刘的博客","slug":"hello-world","date":"2022-03-21T10:01:26.447Z","updated":"2022-03-22T12:50:21.804Z","comments":true,"path":"2022/03/21/hello-world/","link":"","permalink":"https://dddwah11.github.io/2022/03/21/hello-world/","excerpt":"","text":"暂时不知道写点啥","categories":[],"tags":[]}],"categories":[],"tags":[]}