{"meta":{"title":"61分","subtitle":"","description":"","author":"小刘","url":"https://dddwah11.github.io","root":"/"},"pages":[],"posts":[{"title":"SpringBoot Web开发","slug":"4.14/SpringBoot-Web开发","date":"2022-04-14T12:31:54.329Z","updated":"2022-04-14T13:51:06.497Z","comments":true,"path":"2022/04/14/4.14/SpringBoot-Web开发/","link":"","permalink":"https://dddwah11.github.io/2022/04/14/4.14/SpringBoot-Web%E5%BC%80%E5%8F%91/","excerpt":"","text":"jar:webpp! 导入静态资源 首页 jsp，模板引擎Thymeleaf 装配扩展SpringMVC 增删改查 拦截器 国际化 在springboot，我们使用以下方式处理静态资源 webjars localhost:8080/webjars/ public，static，&#x2F;**,resource localhost:8080/ 优先级 resource&gt;static(默认)&gt;public 首页如何定制index.html 最好设置在static里 在templates目录下的页面，只通过controller来跳转 需要模板引擎的支持","categories":[],"tags":[]},{"title":"","slug":"4.14/springboot主启动类运行","date":"2022-04-14T08:13:07.450Z","updated":"2022-04-14T12:23:07.055Z","comments":true,"path":"2022/04/14/4.14/springboot主启动类运行/","link":"","permalink":"https://dddwah11.github.io/2022/04/14/4.14/springboot%E4%B8%BB%E5%90%AF%E5%8A%A8%E7%B1%BB%E8%BF%90%E8%A1%8C/","excerpt":"","text":"主启动类运行 初始化 判断是不是为一个web应用 打开监听器全局处理上下文 通过主类加载，通过类加载获取spring。factories 装配环境参数 yaml 可以给实体类赋值 # k = v # 注入到我们配置类中 # 普通的key-value name : xiaoliu dog: name: xiaogou age: 3 # 对象 student: name: xiaoliu age: 3 ## 行内写法 student1: &#123;name: xialiu, age: 3&#125; ##数组 pets: - dog - vat - cat pets1: [dog,we,zw] ##对象 person: name: xiaoliu age: 3 happy: flase birth: 2022/10/2 map: &#123;k2: v1,k1: v2&#125; list: - code - music - book @ConfigurationProperties(prefix = &quot;person&quot;) 可以通过这个注解将配置文件中的值映射到组件 @component 上 也可以通过 @PropertySource(&quot;classpath:xiaoliu.properties&quot;) 注解映射到组件上 //加载指定的配置文件 @PropertySource(&quot;classpath:xiaoliu.properties&quot;) public class Person &#123; // SPEL表达式取值 @Value(&quot;$&#123;name&#125;&quot;) 松散绑定在yml中 写的为last-name 与lastName是一样的 jsr303校验约束注解名称 约束注解说明@Null 验证对象是否为空@NotNull 验证对象是否为非空@AssertTrue 验证 Boolean 对象是否为 true@AssertFalse 验证 Boolean 对象是否为 false@Min 验证 Number 和 String 对象是否大等于指定的值@Max 验证 Number 和 String 对象是否小等于指定的值@DecimalMin 验证 Number 和 String 对象是否大等于指定的值，小数存在精度@DecimalMax 验证 Number 和 String 对象是否小等于指定的值，小数存在精度@Size 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内@Digits 验证 Number 和 String 的构成是否合法@Past 验证 Date 和 Calendar 对象是否在当前时间之前@Future 验证 Date 和 Calendar 对象是否在当前时间之后@Pattern 验证 String 对象是否符合正则表达式的规则 自动配置原理xxxAutoConfiguration: 默认值 xxxproperties 和配置文件绑定 我们就可以使用自定义的配置 每一个 xxxAutoConfiguration 都是容器中的一个组件，最后都加入到容器中让他们自动配置 这就是自动装配的原理!精髓:1)、SpringBoot启动会加载大量的自动配置类2)、我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类当中;3)、我们再来看这个自动配置类中到底配置了哪些组件; (只要我们要用的组件存在在其中，我们就不需要再手动配置了)4)、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只需要在配置文件中指定这些属性的值即可;xxxxAutoConfigurartion:自动配置类;给容器中添加组件xxxxProperties:封装配置文件中相关属性文件","categories":[],"tags":[]},{"title":"每日算法-quicksort","slug":"2022-4-13/每日算法-quicksort","date":"2022-04-13T15:47:43.908Z","updated":"2022-04-14T02:25:40.470Z","comments":true,"path":"2022/04/13/2022-4-13/每日算法-quicksort/","link":"","permalink":"https://dddwah11.github.io/2022/04/13/2022-4-13/%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95-quicksort/","excerpt":"","text":"有没有既不浪费空间又可以快一点的排序算法呢？那就是快速排啦！ /** * @author: 61分 * @date: 2022/4/14 0:05 * @description: */ public class quickSort &#123; public static void quickSort(int [] arr,int low,int high)&#123; int i,j,tmp,t; if (low&gt;high)&#123; return; &#125; i = low; j = high; tmp = arr[low]; while (i&lt;j)&#123; // 先看右边,从最右边递减 while (tmp&lt;=arr[j]&amp;&amp;i&lt;j)&#123; j--; &#125; // 再看左边，递加 while (tmp&gt;=arr[i]&amp;&amp;i&lt;j)&#123; i++; &#125; // 满足条件的话，交换他们的值 if (i&lt;j)&#123; t = arr[j]; arr[j] = arr[i]; arr[i] = t; &#125; &#125; arr[low] = arr[i]; arr[i] = tmp; // 之后递归调用 处理左边的 quickSort(arr,low,j-1); // 处理右边的 quickSort(arr,j+1,high); &#125; public static void main(String[] args) &#123; int [] num= &#123;10,54,21,42,78,65,48&#125;; quickSort(num,0,num.length-1); for (int i = 0; i &lt; num.length; i++) &#123; System.out.println(num[i]); &#125; &#125; &#125;","categories":[],"tags":[]},{"title":"spirngboot初学","slug":"2022-4-13/springboot","date":"2022-04-13T14:47:41.164Z","updated":"2022-04-14T02:25:29.426Z","comments":true,"path":"2022/04/13/2022-4-13/springboot/","link":"","permalink":"https://dddwah11.github.io/2022/04/13/2022-4-13/springboot/","excerpt":"","text":"SpringBoot原理1、自动装配原理pom.xml spring-boot-dependencies:核心依赖在父工程中 我们在引入一些spring依赖的时候，不需要指定版本，因为有这些版本仓库 启动器 &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; 是springboot的启动场景 比如springbootwb 就帮我们自动导入web环境所需的所有依赖！ 将所有的功能场景变成一个个启动器 springboot主程序 @SpringBootApplication public class HelloWorldApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(HelloWorldApplication.class, args); &#125; &#125; 注解 @SpringBootConfiguration @SpringBootConfiguration 自动配置的核心文件 WEB-INF/spring.factories 所有的资源加载到配置类中 Properties properties = PropertiesLoaderUtils.loadProperties(resource) 核心注解 @ConditionalOnXXX 在满足所有条件才会生效 springboot自动配置都在启动的时候扫描并加载 spirng.properties 所有的自动配置类都在这个配置文件中，通过判断核心注解是否满足条件才能生效 springboot在启动的时候，通过类路径下的 WEB-INF/spirng.properties 获得指定的值 将这些自动配置的类导入容器，自动配置就会生效 即完成自动配置 整合javaEE 解决方案和自动配置的东西都在 spring-boot-test-autoconfigure-2.3.7.RELEASE.jar 中","categories":[],"tags":[]},{"title":"Mybatis-03","slug":"2022-4-13/Mybatis-03","date":"2022-04-13T02:48:32.989Z","updated":"2022-04-14T02:28:18.256Z","comments":true,"path":"2022/04/13/2022-4-13/Mybatis-03/","link":"","permalink":"https://dddwah11.github.io/2022/04/13/2022-4-13/Mybatis-03/","excerpt":"","text":"Mybatis-03设置（settings）这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 下表描述了设置中各项设置的含义、默认值等。 设置名 描述 有效值 默认值 cacheEnabled 全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。 true | false true lazyLoadingEnabled 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。 true | false false aggressiveLazyLoading 开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载（参考 lazyLoadTriggerMethods)。 true | false false （在 3.4.1 及之前的版本中默认为 true） multipleResultSetsEnabled 是否允许单个语句返回多结果集（需要数据库驱动支持）。 true | false true useColumnLabel 使用列标签代替列名。实际表现依赖于数据库驱动，具体可参考数据库驱动的相关文档，或通过对比测试来观察。 true | false true useGeneratedKeys 允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。 true | false False autoMappingBehavior 指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。 FULL 会自动映射任何复杂的结果集（无论是否嵌套）。 NONE, PARTIAL, FULL PARTIAL autoMappingUnknownColumnBehavior 指定发现自动映射目标未知列（或未知属性类型）的行为。NONE: 不做任何反应WARNING: 输出警告日志（&#39;org.apache.ibatis.session.AutoMappingUnknownColumnBehavior&#39; 的日志等级必须设置为 WARN）FAILING: 映射失败 (抛出 SqlSessionException) NONE, WARNING, FAILING NONE defaultExecutorType 配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（PreparedStatement）； BATCH 执行器不仅重用语句还会执行批量更新。 SIMPLE REUSE BATCH SIMPLE defaultStatementTimeout 设置超时时间，它决定数据库驱动等待数据库响应的秒数。 任意正整数 未设置 (null) defaultFetchSize 为驱动的结果集获取数量（fetchSize）设置一个建议值。此参数只可以在查询设置中被覆盖。 任意正整数 未设置 (null) defaultResultSetType 指定语句默认的滚动策略。（新增于 3.5.2） FORWARD_ONLY | SCROLL_SENSITIVE | SCROLL_INSENSITIVE | DEFAULT（等同于未设置） 未设置 (null) safeRowBoundsEnabled 是否允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。 true | false False safeResultHandlerEnabled 是否允许在嵌套语句中使用结果处理器（ResultHandler）。如果允许使用则设置为 false。 true | false True mapUnderscoreToCamelCase 是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。 true | false False localCacheScope MyBatis 利用本地缓存机制（Local Cache）防止循环引用和加速重复的嵌套查询。 默认值为 SESSION，会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地缓存将仅用于执行语句，对相同 SqlSession 的不同查询将不会进行缓存。 SESSION | STATEMENT SESSION jdbcTypeForNull 当没有为参数指定特定的 JDBC 类型时，空值的默认 JDBC 类型。 某些数据库驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。 JdbcType 常量，常用值：NULL、VARCHAR 或 OTHER。 OTHER lazyLoadTriggerMethods 指定对象的哪些方法触发一次延迟加载。 用逗号分隔的方法列表。 equals,clone,hashCode,toString defaultScriptingLanguage 指定动态 SQL 生成使用的默认脚本语言。 一个类型别名或全限定类名。 org.apache.ibatis.scripting.xmltags.XMLLanguageDriver defaultEnumTypeHandler 指定 Enum 使用的默认 TypeHandler 。（新增于 3.4.5） 一个类型别名或全限定类名。 org.apache.ibatis.type.EnumTypeHandler callSettersOnNulls 指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet() 或 null 值进行初始化时比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。 true | false false returnInstanceForEmptyRow 当返回行的所有列都是空时，MyBatis默认返回 null。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集（如集合或关联）。（新增于 3.4.2） true | false false logPrefix 指定 MyBatis 增加到日志名称的前缀。 任何字符串 未设置 logImpl 指定 MyBatis 所用日志的具体实现，未指定时将自动查找。 SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING 未设置 proxyFactory 指定 Mybatis 创建可延迟加载对象所用到的代理工具。 CGLIB | JAVASSIST JAVASSIST （MyBatis 3.3 以上） vfsImpl 指定 VFS 的实现 自定义 VFS 的实现的类全限定名，以逗号分隔。 未设置 useActualParamName 允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 -parameters 选项。（新增于 3.4.1） true | false true configurationFactory 指定一个提供 Configuration 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。 这个类必须包含一个签名为static Configuration getConfiguration() 的方法。（新增于 3.2.3） 一个类型别名或完全限定类名。 未设置 一个配置完整的 settings 元素的示例如下： &lt;settings&gt; &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt; &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt; &lt;setting name=&quot;multipleResultSetsEnabled&quot; value=&quot;true&quot;/&gt; &lt;setting name=&quot;useColumnLabel&quot; value=&quot;true&quot;/&gt; &lt;setting name=&quot;useGeneratedKeys&quot; value=&quot;false&quot;/&gt; &lt;setting name=&quot;autoMappingBehavior&quot; value=&quot;PARTIAL&quot;/&gt; &lt;setting name=&quot;autoMappingUnknownColumnBehavior&quot; value=&quot;WARNING&quot;/&gt; &lt;setting name=&quot;defaultExecutorType&quot; value=&quot;SIMPLE&quot;/&gt; &lt;setting name=&quot;defaultStatementTimeout&quot; value=&quot;25&quot;/&gt; &lt;setting name=&quot;defaultFetchSize&quot; value=&quot;100&quot;/&gt; &lt;setting name=&quot;safeRowBoundsEnabled&quot; value=&quot;false&quot;/&gt; &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;false&quot;/&gt; &lt;setting name=&quot;localCacheScope&quot; value=&quot;SESSION&quot;/&gt; &lt;setting name=&quot;jdbcTypeForNull&quot; value=&quot;OTHER&quot;/&gt; &lt;setting name=&quot;lazyLoadTriggerMethods&quot; value=&quot;equals,clone,hashCode,toString&quot;/&gt; &lt;/settings&gt; &lt;settings&gt; &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot;/&gt; &lt;/settings&gt; STDOUT_LOGGING标准日志输出：Logging initialized using ‘class org.apache.ibatis.logging.stdout.StdOutImpl’ adapter.PooledDataSource forcefully closed&#x2F;removed all connections.PooledDataSource forcefully closed&#x2F;removed all connections.PooledDataSource forcefully closed&#x2F;removed all connections.PooledDataSource forcefully closed&#x2F;removed all connections.Opening JDBC ConnectionCreated connection 775386112.Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@2e377400]&#x3D;&#x3D;&gt; Preparing: select id,name,password from mybatis.user where id &#x3D; ?&#x3D;&#x3D;&gt; Parameters: 2(Integer)&lt;&#x3D;&#x3D; Columns: id, name, password&lt;&#x3D;&#x3D; Row: 2, 大刘哥, 1234&lt;&#x3D;&#x3D; Total: 1User{id&#x3D;2, name&#x3D;’大刘哥’, pwd&#x3D;’1234’}Resetting autocommit to true on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@2e377400]Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@2e377400]Returned connection 775386112 to pool. Process finished with exit code 0 Log4j 控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等； 我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。 最令人感兴趣的就是，这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。 ​ 导入相关依赖 log4j.properties #将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码 log4j.rootLogger=DEBUG,console,file #控制台输出的相关设置 log4j.appender.console = org.apache.log4j.ConsoleAppender log4j.appender.console.Target = System.out log4j.appender.console.Threshold=DEBUG log4j.appender.console.layout = org.apache.log4j.PatternLayout log4j.appender.console.layout.ConversionPattern=[%c]-%m%n #文件输出的相关设置 log4j.appender.file = org.apache.log4j.RollingFileAppender log4j.appender.file.File=./log/xiaoliu.log log4j.appender.file.MaxFileSize=10mb log4j.appender.file.Threshold=DEBUG log4j.appender.file.layout=org.apache.log4j.PatternLayout log4j.appender.file.layout.ConversionPattern=[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n #日志输出级别 log4j.logger.org.mybatis=DEBUG log4j.logger.java.sql=DEBUG log4j.logger.java.sql.Statement=DEBUG log4j.logger.java.sql.ResultSet=DEBUG log4j.logger.java.sql.PreparedStatement=DEBUG 配置文件的实现： &lt;settings&gt; &lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot;/&gt; &lt;/settings&gt; D:\\Java\\jdk1.8.0_191\\bin\\java.exe -ea -Didea.test.cyclic.buffer.size&#x3D;1048576 “-javaagent:D:\\IntelliJ?org.apache.ibatis.transaction.jdbc.JdbcTransaction?-Opening JDBC Connection?org.apache.ibatis.datasource.pooled.PooledDataSource?-Created connection 1151844284.?org.apache.ibatis.transaction.jdbc.JdbcTransaction?-Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@44a7bfbc]?com.xiaoliu.Dao.UserMapper.getUserById?-&#x3D;&#x3D;&gt; Preparing: select id,name,password from mybatis.user where id &#x3D; ??com.xiaoliu.Dao.UserMapper.getUserById?-&#x3D;&#x3D;&gt; Parameters: 2(Integer)?com.xiaoliu.Dao.UserMapper.getUserById?-&lt;&#x3D;&#x3D; Total: 1User{id&#x3D;2, name&#x3D;’大刘哥’, pwd&#x3D;’1234’}?org.apache.ibatis.transaction.jdbc.JdbcTransaction?-Resetting autocommit to true on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@44a7bfbc]?org.apache.ibatis.transaction.jdbc.JdbcTransaction?-Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@44a7bfbc]?org.apache.ibatis.datasource.pooled.PooledDataSource?-Returned connection 1151844284 to pool. Process finished with exit code 0 在使用时要记得到入包 import org.apache.log4j.Logger; 并在要使用的类下面使用当前的class static Logger logger = Logger.getLogger(UserMapperTest.class); 分页","categories":[],"tags":[]},{"title":"每日算法","slug":"2022-4-12/---","date":"2022-04-12T16:33:51.713Z","updated":"2022-04-13T02:34:51.169Z","comments":true,"path":"2022/04/13/2022-4-12/---/","link":"","permalink":"https://dddwah11.github.io/2022/04/13/2022-4-12/---/","excerpt":"","text":"/** * @author: 61分 * @date: 2022/4/13 0:23 * @description: */ public class popSort &#123; public static void main(String[] args) &#123; int[] nums=&#123;1,2,3,4,5,6,89,77&#125;; int tmp = 0; for (int i = 0; i &lt; nums.length-1; i++) &#123; for (int j = 0; j &lt; nums.length-i-1; j++) &#123; if (nums[j]&lt;nums[j+1])&#123; tmp = nums[j]; nums[j] = nums[j+1]; nums[j+1] = tmp; &#125; &#125; &#125; for (int k = 0; k &lt; nums.length; k++) &#123; System.out.println(nums[k]); &#125; &#125; &#125;","categories":[],"tags":[]},{"title":"Mybatis02","slug":"2022-4-12/接口必须和Mapper配置文件同名接口必须和Mapper配置文件在同一个包下","date":"2022-04-12T12:09:05.748Z","updated":"2022-04-13T06:25:59.754Z","comments":true,"path":"2022/04/12/2022-4-12/接口必须和Mapper配置文件同名接口必须和Mapper配置文件在同一个包下/","link":"","permalink":"https://dddwah11.github.io/2022/04/12/2022-4-12/%E6%8E%A5%E5%8F%A3%E5%BF%85%E9%A1%BB%E5%92%8CMapper%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%90%8C%E5%90%8D%E6%8E%A5%E5%8F%A3%E5%BF%85%E9%A1%BB%E5%92%8CMapper%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%9C%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E5%8C%85%E4%B8%8B/","excerpt":"","text":"映射器 接口必须和Mapper配置文件同名 接口必须和Mapper配置文件在同一个包下 生命周期及其作用域 生命周期类别是至关重要的，因为错误的使用会导致非常严重的并发问题。 属性名和字段名的不一致 利用resultMap（结果集映射） UserMapper.xml： &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.xiaoliu.Dao.UserMapper&quot;&gt; &lt;!-- 结果集映射--&gt; &lt;!-- column为数据库中的字段名，property为实体类中的属性--&gt; &lt;resultMap id=&quot;UserMap&quot; type=&quot;com.xiaoliu.pojo.User&quot;&gt; &lt;!-- &lt;result property=&quot;id&quot; column=&quot;id&quot;/&gt;--&gt; &lt;!-- &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;--&gt; &lt;result property=&quot;pwd&quot; column=&quot;password&quot;/&gt; &lt;/resultMap&gt; &lt;select id=&quot;getUserById&quot; resultMap=&quot;UserMap&quot;&gt; select id,name,password from mybatis.user where id = #&#123;id&#125; &lt;/select&gt; &lt;/mapper&gt; 测试类： public class UserMapperTest &#123; @Test public void getUserById()&#123; SqlSession sqlSession = MybatisUtils.getSqlSession(); // 获取接口 UserMapper mapper = sqlSession.getMapper(UserMapper.class); User user = mapper.getUserById(2); System.out.println(user); sqlSession.close(); &#125; &#125; 结果： User{id&#x3D;2, name&#x3D;’大刘哥’, pwd&#x3D;’1234’} Process finished with exit code 0","categories":[],"tags":[]},{"title":"Mybatis初学","slug":"2022-4-11/Mybatis","date":"2022-04-11T14:31:27.955Z","updated":"2022-04-12T06:43:05.888Z","comments":true,"path":"2022/04/11/2022-4-11/Mybatis/","link":"","permalink":"https://dddwah11.github.io/2022/04/11/2022-4-11/Mybatis/","excerpt":"","text":"Mybatis1、什么是Mybatis​ MyBatis本是apache的一个开源项目iBatis，2010年这个项目由apache software foundation迁移到了[google code](https://baike.baidu.com/item/google code&#x2F;2346604)，并且改名为MyBatis。2013年11月迁移到Github。 ​ iBATIS一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。iBATIS提供的持久层框架包括SQL Maps和Data Access Objects（DAOs）。 ​ 当前，最新版本是MyBatis 3.5.9，其发布时间是2021年12月26日。 2、持久化​ 持久化是将程序数据在持久状态和瞬时状态间转换的机制。通俗的讲，就是瞬时数据（比如内存中的数据，是不能永久保存的）持久化为持久数据（比如持久化至数据库中，能够长久保存）。 3、持久层​ 可以理解成数据 保存在 数据库或者 硬盘一类可以保存很长时间的设备里面，不像放在内存中那样断电就消失了，也就是把数据存在持久化设备上，mybatis就是持久层。 内存：断点即失 4、Maven项目下创建第一个mybatis程序4.1 导入依赖：mysql驱动、mybatis、lombok。注意：maven资源导出问题：最好，父类，子类都添加&lt;build&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;true&lt;/filtering&gt; &lt;/resource&gt; &lt;resource&gt; &lt;directory&gt;src/main/java&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;true&lt;/filtering&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/build&gt; 搭好项目结构： 4.3、去mybatis中文文档 粘贴需要用到的核心配置文件&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt; &lt;configuration&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?userSSL=true&amp;amp;userUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimezone=UTC&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;!-- 注册Mapper--&gt; &lt;mappers&gt; &lt;mapper resource=&quot;com/xiaoliu/Mapper/UserMapper.xml&quot;/&gt; &lt;/mappers&gt; &lt;/configuration&gt; 注意：注册mapper 4.4、编写实体类Userpackage com.xiaoliu.pojo; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; /** * @author: 61分 * @date: 2022/4/11 17:35 * @description: */ @Data @NoArgsConstructor @AllArgsConstructor public class User &#123; private int id; private String name; private String password; &#125; 4.5、编写Mapper接口及实现的配置文件&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;!--namespace=绑定对应的Mapper接口--&gt; &lt;mapper namespace=&quot;com.xiaoliu.Mapper.UserMapper&quot;&gt; &lt;!-- id对应的是方法名称--&gt; &lt;select id=&quot;getUserList&quot; resultType=&quot;com.xiaoliu.pojo.User&quot;&gt; select * from mybatis.user &lt;/select&gt; &lt;/mapper&gt; 配置文件 UserMappe接口 package com.xiaoliu.Mapper; import com.xiaoliu.pojo.User; import java.util.List; /** * @author: 61分 * @date: 2022/4/11 17:41 * @description: */ public interface UserMapper &#123; List&lt;User&gt; getUserList(); &#125; ​ 4.6、编写MybatisUtil类获取SQLSession 执行SQLSession package com.xiaoliu.utils; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import java.io.IOException; import java.io.InputStream; /** * @author: 61分 * @date: 2022/4/11 15:55 * @description:获取SQLSessionFactory */ public class MybatisUtils &#123; private static SqlSessionFactory sqlSessionFactory; static &#123; try &#123; // 获取SQLSessionFactory-》SQLSession String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; // 既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。 // SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。 // 你可以通过 SqlSession 实例来直接执行已映射的 SQL 语句。 public static SqlSession getSqlSession()&#123; return sqlSessionFactory.openSession(); &#125; &#125; 4.7、编写Test类进行测试package com.xiaoliu.Mapper; import com.xiaoliu.pojo.User; import com.xiaoliu.utils.MybatisUtils; import org.apache.ibatis.session.SqlSession; import org.junit.Test; import java.util.List; /** * @author: 61分 * @date: 2022/4/11 18:00 * @description: */ public class UserMapperTest &#123; @Test public void test()&#123; // 第一步：获得sqlSession对象 SqlSession sqlSession = MybatisUtils.getSqlSession(); System.out.println(&quot;getsqlSession&quot;); // 第二步，方式一：getMapper UserMapper mapper = sqlSession.getMapper(UserMapper.class); List&lt;User&gt; userList = mapper.getUserList(); System.out.println(&quot;getMapper&quot;); for (User user : userList) &#123; System.out.println(user); &#125; // 关闭sqlSession System.out.println(&quot;close&quot;); sqlSession.close(); &#125; &#125; 测试成功： 5、学习总结​ 注意注册Mapper，及maven资源导出的问题","categories":[],"tags":[]},{"title":"这是个测试块","slug":"we","date":"2022-03-22T12:51:06.905Z","updated":"2022-04-13T02:33:54.749Z","comments":true,"path":"2022/03/22/we/","link":"","permalink":"https://dddwah11.github.io/2022/03/22/we/","excerpt":"","text":"这是个测试块","categories":[],"tags":[]},{"title":"欢迎来到小刘的博客","slug":"hello-world","date":"2022-03-21T10:01:26.447Z","updated":"2022-03-22T12:50:21.804Z","comments":true,"path":"2022/03/21/hello-world/","link":"","permalink":"https://dddwah11.github.io/2022/03/21/hello-world/","excerpt":"","text":"暂时不知道写点啥","categories":[],"tags":[]}],"categories":[],"tags":[]}